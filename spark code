import * as React from "react";
import { createRoot } from "react-dom/client";
import {
  SparkApp,
  PageContainer,
  Card,
  Button,
  Input,
  Link
} from "@github/spark/components";
import { ChartBar, Warning, ThumbsUp, Lightbulb, MagnifyingGlass, LineChart } from "@phosphor-icons/react";

// ----------- ANALYSIS HELPERS ------------

function analyzeText(text) {
  if (!text || typeof text !== "string" || text.trim().length === 0) {
    return {
      hostility: 0,
      formality: 0,
      sentiment: 0,
      toxicity: 0,
      constructiveness: 0,
      keywords: {},
      patterns: []
    };
  }

  const hostileWords = ["terrible", "wrong", "stupid", "awful", "hate", "useless", "idiot", "ridiculous"];
  const formalWords = ["therefore", "consequently", "furthermore", "however", "regards", "additionally"];
  const positiveWords = ["thanks", "great", "awesome", "helpful", "appreciate", "good", "excellent"];
  const negativeWords = ["bug", "issue", "problem", "error", "fail", "broken", "bad"];
  const toxicWords = ["stupid", "idiot", "useless", "terrible", "hate", "awful"];
  const constructiveWords = ["suggest", "perhaps", "consider", "improve", "help", "could", "maybe"];

  const words = text.toLowerCase().split(/\W+/).filter(Boolean);
  const wordCount = words.length || 1;

  const sentences = text.split(/[.!?]+/).filter(s => s.trim().length > 0);

  const hostility = words.filter(w => hostileWords.includes(w)).length / wordCount;
  const formality = words.filter(w => formalWords.includes(w)).length / wordCount;
  const sentiment =
    (words.filter(w => positiveWords.includes(w)).length -
      words.filter(w => negativeWords.includes(w)).length) / wordCount;
  const toxicity = words.filter(w => toxicWords.includes(w)).length / wordCount;
  const constructiveness = words.filter(w => constructiveWords.includes(w)).length / wordCount;

  // Detect patterns
  const patterns = [];
  if (sentences.length > 0) {
    if (sentences.filter(s => s.includes("?")).length / sentences.length > 0.3) {
      patterns.push("Frequently asks questions - shows engagement");
    }
    if (constructiveness > 0.1) {
      patterns.push("Often provides constructive feedback");
    }
    if (hostility > 0.1) {
      patterns.push("Shows signs of confrontational communication");
    }
    if (formality > 0.15) {
      patterns.push("Maintains professional tone");
    }
  }

  // Extract topic keywords
  const stopWords = new Set(["the", "a", "an", "and", "or", "but", "in", "on", "at", "to", "for"]);
  const keywords = words
    .filter(w => w.length > 3 && !stopWords.has(w))
    .reduce((acc, word) => {
      acc[word] = (acc[word] || 0) + 1;
      return acc;
    }, {});

  return {
    hostility,
    formality,
    sentiment,
    toxicity,
    constructiveness,
    keywords,
    patterns
  };
}

// ----------- COMMENT HISTORY COMPASS (PAST 3 MONTHS) ------------

function getPastThreeMonthsBuckets() {
  const now = new Date();
  const months = [];
  for (let i = 2; i >= 0; i--) {
    const d = new Date(now.getFullYear(), now.getMonth() - i, 1);
    const key = `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, "0")}`;
    months.push(key);
  }
  return months;
}

// Returns: { '2025-05': [comment1, ...], ... } just for past 3 months
function bucketCommentsPastThreeMonths(comments) {
  const months = getPastThreeMonthsBuckets();
  const buckets = {};
  for (const m of months) buckets[m] = [];
  comments.forEach(c => {
    const d = new Date(c.createdAt);
    const key = `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, "0")}`;
    if (buckets[key]) buckets[key].push(c);
  });
  return buckets;
}

function CommentHistoryCompassPast3Months({ comments, analyzeText }) {
  const buckets = bucketCommentsPastThreeMonths(comments);
  const months = getPastThreeMonthsBuckets();

  const timeline = months.map(month => {
    const commentsInMonth = buckets[month] || [];
    let sum = { hostility: 0, sentiment: 0, formality: 0, toxicity: 0, constructiveness: 0 };
    let keywords = {};
    commentsInMonth.forEach(c => {
      const res = analyzeText(c.body);
      sum.hostility += res.hostility;
      sum.sentiment += res.sentiment;
      sum.formality += res.formality;
      sum.toxicity += res.toxicity;
      sum.constructiveness += res.constructiveness;
      Object.keys(res.keywords).forEach(k => {
        keywords[k] = (keywords[k] || 0) + res.keywords[k];
      });
    });
    const n = commentsInMonth.length || 1;
    const topKeywords = Object.entries(keywords).sort(([,a],[,b])=>b-a).slice(0,3).map(([w])=>w);
    return {
      month,
      hostility: sum.hostility / n,
      sentiment: sum.sentiment / n,
      formality: sum.formality / n,
      toxicity: sum.toxicity / n,
      constructiveness: sum.constructiveness / n,
      keywords: topKeywords,
      count: commentsInMonth.length
    };
  });

  // Month label helper
  function formatMonth(monthStr) {
    const [year, month] = monthStr.split("-");
    const d = new Date(`${year}-${month}-01`);
    return d.toLocaleString(undefined, { month: "short", year: "2-digit" });
  }

  return (
    <Card>
      <div className="p-4">
        <h2 className="text-lg font-medium mb-2 flex items-center gap-2">
          <LineChart className="text-accent-9" /> Comment History Compass (Past 3 Months)
        </h2>
        <div className="text-accent-11 mb-2 text-xs">
          Visualizes monthly shifts in commenting style and themes.
        </div>
        <div className="overflow-x-auto">
          <table className="min-w-full text-xs mb-4">
            <thead>
              <tr>
                <th className="px-2 py-1 text-left">Month</th>
                <th className="px-2 py-1 text-left">Comments</th>
                <th className="px-2 py-1 text-left">Sentiment</th>
                <th className="px-2 py-1 text-left">Hostility</th>
                <th className="px-2 py-1 text-left">Toxicity</th>
                <th className="px-2 py-1 text-left">Constructiveness</th>
                <th className="px-2 py-1 text-left">Top Themes</th>
              </tr>
            </thead>
            <tbody>
              {timeline.map(row => (
                <tr key={row.month}>
                  <td className="px-2 py-1">{formatMonth(row.month)}</td>
                  <td className="px-2 py-1">{row.count}</td>
                  <td className="px-2 py-1">{(row.sentiment * 100).toFixed(1)}%</td>
                  <td className="px-2 py-1">{(row.hostility * 100).toFixed(1)}%</td>
                  <td className="px-2 py-1">{(row.toxicity * 100).toFixed(1)}%</td>
                  <td className="px-2 py-1">{(row.constructiveness * 100).toFixed(1)}%</td>
                  <td className="px-2 py-1">{row.keywords.join(", ")}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </Card>
  );
}

// ----------- BIO INSIGHTS ------------

function BioInsights({ bio }) {
  if (!bio || bio.trim() === "") return null;
  const analysis = analyzeText(bio);

  let summary = "";
  if (analysis.sentiment > 0.1) summary += "The bio conveys a positive impression. ";
  else if (analysis.sentiment < -0.1) summary += "The bio carries a negative undertone. ";
  else summary += "The bio appears neutral. ";

  if (analysis.formality > 0.15) summary += "It maintains a formal/professional tone. ";
  else if (analysis.formality < 0.05) summary += "It is written in an informal style. ";

  if (analysis.constructiveness > 0.1) summary += "It signals a constructive and open mindset. ";
  if (analysis.hostility > 0.1 || analysis.toxicity > 0.1) summary += "There are signs of confrontational or negative language. ";

  return (
    <Card>
      <div className="p-4">
        <h2 className="text-lg font-medium mb-2 flex items-center gap-2">
          <Lightbulb className="text-accent-secondary-9" />
          Profile Bio Analysis
        </h2>
        <p className="mb-2 text-accent-11">{bio}</p>
        <div className="mb-2 text-sm">
          <b>Analysis Summary:</b> {summary}
        </div>
        <div className="grid grid-cols-3 gap-4 mb-2">
          <div>
            <div className="text-xs text-accent-11 mb-1">Toxicity</div>
            <div className="font-mono text-accent-9">{(analysis.toxicity * 100).toFixed(1)}%</div>
          </div>
          <div>
            <div className="text-xs text-accent-11 mb-1">Constructiveness</div>
            <div className="font-mono text-accent-secondary-9">{(analysis.constructiveness * 100).toFixed(1)}%</div>
          </div>
          <div>
            <div className="text-xs text-accent-11 mb-1">Sentiment</div>
            <div className="font-mono">
              {analysis.sentiment > 0 ? "+" : ""}
              {(analysis.sentiment * 100).toFixed(1)}%
            </div>
          </div>
        </div>
        {Object.keys(analysis.keywords).length > 0 && (
          <div className="mt-2">
            <div className="text-xs font-medium mb-1">Keywords:</div>
            <div className="flex flex-wrap gap-2">
              {Object.entries(analysis.keywords)
                .sort(([, a], [, b]) => b - a)
                .slice(0, 6)
                .map(([word, count]) => (
                  <span key={word} className="px-2 py-1 bg-accent-3 rounded text-xs">
                    {word} ({count})
                  </span>
                ))}
            </div>
          </div>
        )}
      </div>
    </Card>
  );
}

// ----------- BEHAVIOR INSIGHTS ------------

function BehaviorInsights({ activity }) {
  if (!activity || activity.length === 0) return null;

  const aggregateAnalysis = activity.reduce(
    (acc, item) => {
      const analysis = analyzeText(item.content || "");
      acc.hostility += analysis.hostility;
      acc.formality += analysis.formality;
      acc.sentiment += analysis.sentiment;
      acc.toxicity += analysis.toxicity;
      acc.constructiveness += analysis.constructiveness;
      acc.patterns = [...acc.patterns, ...analysis.patterns];

      Object.entries(analysis.keywords).forEach(([word, count]) => {
        acc.keywords[word] = (acc.keywords[word] || 0) + count;
      });

      return acc;
    },
    {
      hostility: 0,
      formality: 0,
      sentiment: 0,
      toxicity: 0,
      constructiveness: 0,
      patterns: [],
      keywords: {}
    }
  );

  const total = activity.length || 1;
  aggregateAnalysis.hostility /= total;
  aggregateAnalysis.formality /= total;
  aggregateAnalysis.sentiment /= total;
  aggregateAnalysis.toxicity /= total;
  aggregateAnalysis.constructiveness /= total;

  const uniquePatterns = [...new Set(aggregateAnalysis.patterns)];
  const topKeywords = Object.entries(aggregateAnalysis.keywords)
    .sort(([, a], [, b]) => b - a)
    .slice(0, 5);

  return (
    <div className="space-y-6">
      <Card>
        <div className="p-4">
          <h2 className="text-lg font-medium mb-4 flex items-center gap-2">
            <ChartBar className="text-accent-9" />
            Communication Metrics
          </h2>

          <div className="grid grid-cols-3 gap-4 mb-6">
            <div className="p-3 bg-neutral-2 rounded">
              <div className="text-sm text-accent-11 mb-1">Toxicity Risk</div>
              <div className="text-xl font-semibold text-accent-9">
                {(aggregateAnalysis.toxicity * 100).toFixed(1)}%
                {aggregateAnalysis.toxicity > 0.1 && (
                  <Warning className="inline ml-2 text-accent-9" />
                )}
              </div>
            </div>

            <div className="p-3 bg-neutral-2 rounded">
              <div className="text-sm text-accent-11 mb-1">Constructiveness</div>
              <div className="text-xl font-semibold text-accent-secondary-9">
                {(aggregateAnalysis.constructiveness * 100).toFixed(1)}%
                {aggregateAnalysis.constructiveness > 0.1 && (
                  <ThumbsUp className="inline ml-2 text-accent-secondary-9" />
                )}
              </div>
            </div>

            <div className="p-3 bg-neutral-2 rounded">
              <div className="text-sm text-accent-11 mb-1">Overall Tone</div>
              <div className="text-xl font-semibold">
                {aggregateAnalysis.sentiment > 0 ? "+" : ""}
                {(aggregateAnalysis.sentiment * 100).toFixed(1)}%
              </div>
            </div>
          </div>
        </div>
      </Card>

      <Card>
        <div className="p-4">
          <h2 className="text-lg font-medium mb-4 flex items-center gap-2">
            <Lightbulb className="text-accent-secondary-9" />
            Behavioral Patterns
          </h2>

          <div className="space-y-4">
            <div className="mb-4">
              <h3 className="text-sm font-medium mb-2">Communication Style</h3>
              <ul className="space-y-2">
                {uniquePatterns.map((pattern, index) => (
                  <li key={index} className="flex items-center gap-2 text-sm">
                    <span className="w-2 h-2 rounded-full bg-accent-6"></span>
                    {pattern}
                  </li>
                ))}
              </ul>
            </div>

            <div>
              <h3 className="text-sm font-medium mb-2">Most Discussed Topics</h3>
              <div className="flex flex-wrap gap-2">
                {topKeywords.map(([word, count]) => (
                  <span key={word} className="px-2 py-1 bg-accent-3 rounded text-sm">
                    {word} ({count})
                  </span>
                ))}
              </div>
            </div>
          </div>

          <div className="mt-6 p-4 bg-neutral-2 rounded">
            <h3 className="text-sm font-medium mb-2">Behavioral Insights</h3>
            <div className="text-sm space-y-2">
              {aggregateAnalysis.toxicity > 0.1 && (
                <p className="text-accent-11">
                  ⚠️ Your communication shows elevated toxicity levels. Consider using more constructive language and taking a moment to reflect before responding.
                </p>
              )}
              {aggregateAnalysis.constructiveness > 0.1 && (
                <p className="text-accent-secondary-11">
                  ✅ You often provide constructive feedback, which helps foster positive discussions.
                </p>
              )}
              {aggregateAnalysis.sentiment < -0.1 && (
                <p className="text-accent-11">
                  💡 Your messages tend to skew negative. Try balancing critique with positive acknowledgments.
                </p>
              )}
              {aggregateAnalysis.formality > 0.15 && (
                <p className="text-accent-secondary-11">
                  ✨ You maintain a professional tone in your communications.
                </p>
              )}
            </div>
          </div>
        </div>
      </Card>
    </div>
  );
}

// ----------- MAIN DASHBOARD ------------

function Dashboard() {
  const [username, setUsername] = React.useState("");
  const [userData, setUserData] = React.useState(null);
  const [recentActivity, setRecentActivity] = React.useState([]);
  const [allComments, setAllComments] = React.useState([]);
  const [isLoading, setIsLoading] = React.useState(false);

  const spark = window.spark;

  const fetchUserData = async () => {
    if (!username || !spark) return;
    setIsLoading(true);
    setUserData(null);
    setRecentActivity([]);
    setAllComments([]);

    try {
      // Fetch basic user info
      const userResponse = await spark.octokit.request("GET /users/{username}", { username });
      setUserData(userResponse.data);

      // Fetch recent public activity
      const eventsResponse = await spark.octokit.request(
        "GET /users/{username}/events/public",
        { username }
      );

      // Process activity data (only include events with non-empty text content)
      const processedActivity = eventsResponse.data
        .map(event => {
          let content = "";
          let url = `https://github.com/${event.repo.name}`;

          if (event.type === "IssueCommentEvent" && event.payload.comment) {
            content = event.payload.comment.body || "";
            url = event.payload.comment.html_url;
          } else if (event.type === "PullRequestReviewCommentEvent" && event.payload.comment) {
            content = event.payload.comment.body || "";
            url = event.payload.comment.html_url;
          } else if (event.type === "IssuesEvent" && event.payload.issue) {
            content = (event.payload.issue.title || "") + "\n" + (event.payload.issue.body || "");
            url = event.payload.issue.html_url;
          } else if (event.type === "PullRequestEvent" && event.payload.pull_request) {
            content = (event.payload.pull_request.title || "") + "\n" + (event.payload.pull_request.body || "");
            url = event.payload.pull_request.html_url;
          } else if (event.type === "PushEvent" && event.payload.commits && event.payload.commits.length > 0) {
            content = event.payload.commits.map(c => c.message).join("\n");
            url = `https://github.com/${event.repo.name}/commits`;
          }
          return {
            type: event.type,
            repo: event.repo.name,
            content: content.trim(),
            createdAt: new Date(event.created_at).toLocaleDateString(),
            url
          };
        })
        .filter(item => item.content && item.content.length > 0)
        .slice(0, 20);

      setRecentActivity(processedActivity);

      // Process all comments for compass
      const comments = eventsResponse.data
        .filter(e =>
          (e.type === "IssueCommentEvent" && e.payload.comment) ||
          (e.type === "PullRequestReviewCommentEvent" && e.payload.comment)
        )
        .map(e => ({
          createdAt: e.payload.comment.created_at,
          body: e.payload.comment.body || "",
          url: e.payload.comment.html_url
        }))
        .filter(c => c.body && c.body.length > 0);

      setAllComments(comments);

    } catch (error) {
      console.error("Error fetching GitHub data:", error);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <SparkApp>
      <PageContainer maxWidth="large">
        <div className="space-y-6">
          {/* Header with controls */}
          <div className="flex justify-between items-center">
            <div>
              <h1 className="text-2xl font-semibold">Communication Mirror</h1>
              <p className="text-accent-11">Understand how your GitHub presence appears to others</p>
            </div>
            <div className="flex gap-4 items-center">
              <Input
                value={username}
                onChange={e => setUsername(e.target.value)}
                placeholder="Enter GitHub username"
                icon={<MagnifyingGlass />}
              />
              <Button
                variant="primary"
                onClick={fetchUserData}
                disabled={isLoading}
              >
                Analyze
              </Button>
            </div>
          </div>

          {isLoading && (
            <Card>
              <div className="p-4 text-accent-11">
                Analyzing communication patterns...
              </div>
            </Card>
          )}

          {userData && (
            <>
              <Card>
                <div className="p-4 flex items-center gap-4">
                  <img
                    src={userData.avatar_url}
                    alt={`${userData.login}'s avatar`}
                    className="w-16 h-16 rounded-full"
                  />
                  <div>
                    <h2 className="text-lg font-medium">{userData.name || userData.login}</h2>
                    <p className="text-accent-11">{userData.bio || "No bio available"}</p>
                    <p className="text-sm text-accent-11">
                      {userData.followers} followers · {userData.following} following ·{" "}
                      {userData.public_repos} repos
                    </p>
                  </div>
                </div>
              </Card>
              {userData.bio && <BioInsights bio={userData.bio} />}
            </>
          )}

          {allComments && allComments.length > 0 && (
            <CommentHistoryCompassPast3Months comments={allComments} analyzeText={analyzeText} />
          )}

          {recentActivity.length > 0 && (
            <>
              <BehaviorInsights activity={recentActivity} />
              <Card>
                <div className="p-4">
                  <h2 className="text-lg font-medium mb-4">Recent Activity</h2>
                  <ul className="space-y-2">
                    {recentActivity.map((activity, index) => (
                      <li key={index} className="text-sm">
                        <Link href={activity.url} className="hover:underline" target="_blank">
                          {activity.ype} on {activity.repo}
                        </Link>
                        <span className="text-accent-11 ml-2">{activity.createdAt}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              </Card>
            </>
          )}
        </div>
      </PageContainer>
    </SparkApp>
  );
}

const root = createRoot(document.getElementById("root"));
root.render(<Dashboard />);
