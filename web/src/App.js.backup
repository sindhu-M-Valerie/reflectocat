import React, { useState } from 'react';
import styled, { keyframes } from 'styled-components';
import CatLogo from './CatLogo';

// Animations
const float = keyframes`
  0% { transform: translateY(0px); }
  50% { transform: translateY(-10px); }
  100% { transform: translateY(0px); }
`;

const fadeInUp = keyframes`
  from { opacity: 0; transform: translateY(30px); }
  to { opacity: 1; transform: translateY(0); }
`;

const pulse = keyframes`
  0% { transform: scale(1); }
  50% { transform: scale(1.05); }
  100% { transform: scale(1); }
`;

// Mirror animation keyframes
const flipRightToLeft = keyframes`
  0%   { transform: translate(-50%, -50%) translateX(0) rotate(0deg); }
  50%  { transform: translate(-50%, -50%) translateX(50px) rotate(180deg); }
  100% { transform: translate(-50%, -50%) translateX(0) rotate(360deg); }
`;

const flipLeftToRight = keyframes`
  0%   { transform: translate(-50%, -50%) translateX(0) rotate(0deg); }
  50%  { transform: translate(-50%, -50%) translateX(-50px) rotate(-180deg); }
  100% { transform: translate(-50%, -50%) translateX(0) rotate(-360deg); }
`;

// Mirror Background Components
const MirrorBackground = styled.div`
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 0;
  overflow: hidden;
`;

const MirrorEmoji = styled.div`
  position: absolute;
  font-size: ${props => props.size || '2rem'};
  color: rgba(79, 172, 254, 0.8);
  user-select: none;
  animation: ${props => props.direction === 'left' ? flipLeftToRight : flipRightToLeft}
             ${props => props.duration || '4s'} ease-in-out infinite;
  animation-delay: ${props => props.delay || '0s'};
  top: ${props => props.top || '50%'};
  left: ${props => props.left || '50%'};
  /* No transform here; it's included in keyframes */
  text-shadow: 0 0 20px rgba(79, 172, 254, 0.8);
  border: 2px solid rgba(79, 172, 254, 0.3);
  border-radius: 50%;
  width: 60px;
  height: 60px;
  display: flex;
  align-items: center;
  justify-content: center;
  background: rgba(79, 172, 254, 0.1);
`;

// Styled Components
const Container = styled.div`
  min-height: 100vh;
  background: linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #0f3460 100%);
  color: white;
  font-family: 'Inter', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  position: relative;
  overflow-x: hidden;
  z-index: 1;
`;

const Header = styled.header`
  padding: 3rem 2rem 1.5rem 2rem;
  text-align: center;
  background: rgba(255, 255, 255, 0.05);
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  animation: ${fadeInUp} 0.8s ease-out;
`;

const LogoWrap = styled.div`
  width: 100px;
  height: 100px;
  margin: 0 auto 1rem auto;
  display: flex;
  align-items: center;
  justify-content: center;
  animation: ${float} 4s ease-in-out infinite;
  font-size: 4.5rem;
  user-select: none;
`;

const Title = styled.h1`
  font-size: 3.2rem;
  margin: 0 0 0.5rem 0;
  font-weight: 800;
  background: linear-gradient(45deg, #4facfe, #00f2fe);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
`;

const Subtitle = styled.p`
  font-size: 1.2rem;
  color: rgba(255, 255, 255, 0.8);
  margin: 0 auto;
  max-width: 600px;
  animation: ${fadeInUp} 0.8s ease-out 0.3s both;
`;

const SearchSection = styled.div`
  padding: 2.5rem 2rem 1.5rem 2rem;
  display: flex;
  justify-content: center;
  gap: 1rem;
  flex-wrap: wrap;
  animation: ${fadeInUp} 0.8s ease-out 0.6s both;
`;

const SearchContainer = styled.div`
  position: relative;
  display: flex;
  align-items: center;
`;

const SearchInput = styled.input`
  padding: 1.2rem 1.5rem 1.2rem 3rem;
  font-size: 1.1rem;
  border: 2px solid rgba(255, 255, 255, 0.2);
  border-radius: 12px;
  background: rgba(255, 255, 255, 0.1);
  color: white;
  min-width: 350px;
  backdrop-filter: blur(10px);
  transition: all 0.3s ease;
  &::placeholder { color: rgba(255, 255, 255, 0.6); }
  &:focus {
    outline: none;
    border-color: #4facfe;
    box-shadow: 0 0 0 3px rgba(79, 172, 254, 0.3);
    background: rgba(255, 255, 255, 0.15);
    transform: scale(1.02);
  }
`;

const SearchIcon = styled.span`
  position: absolute;
  left: 1rem;
  color: rgba(255, 255, 255, 0.6);
  z-index: 1;
  font-size: 1.2rem;
  animation: ${pulse} 2s ease-in-out infinite;
`;

const SearchButton = styled.button`
  padding: 1.2rem 2rem;
  font-size: 1.1rem;
  border: none;
  border-radius: 12px;
  background: linear-gradient(45deg, #4facfe, #00f2fe);
  color: white;
  cursor: pointer;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-weight: 600;
  transition: all 0.3s ease;
  &:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(79, 172, 254, 0.4);
  }
  &:disabled {
    background: rgba(255, 255, 255, 0.2);
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
  }
`;

const Dashboard = styled.div`
  padding: 2rem;
  max-width: 1100px;
  margin: 0 auto;
`;

const Card = styled.div`
  background: rgba(255, 255, 255, 0.1);
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-radius: 16px;
  padding: 2rem;
  margin-bottom: 2rem;
  transition: all 0.3s ease;
  animation: ${fadeInUp} 0.6s ease-out;
  position: relative;
`;

const UserProfile = styled.div`
  display: flex;
  gap: 2rem;
  align-items: center;
  margin-bottom: 2rem;
  @media (max-width: 768px) { flex-direction: column; text-align: center; }
`;

const Avatar = styled.img`
  width: 120px;
  height: 120px;
  border-radius: 50%;
  border: 4px solid rgba(255, 255, 255, 0.3);
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
`;

const UserInfo = styled.div`
  flex: 1;
`;

const UserName = styled.h2`
  font-size: 2rem;
  margin: 0 0 0.5rem 0;
  color: white;
`;

const UserBio = styled.p`
  color: rgba(255, 255, 255, 0.8);
  margin: 0 0 1rem 0;
  line-height: 1.6;
`;

const UserStats = styled.div`
  display: flex;
  gap: 2rem;
  @media (max-width: 768px) { justify-content: center; }
`;

const Stat = styled.div`
  display: flex;
  align-items: center;
  gap: 0.5rem;
  color: rgba(255, 255, 255, 0.8);
`;

const LoadingSpinner = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 4rem;
  flex-direction: column;
  &::after {
    content: '';
    width: 40px;
    height: 40px;
    border: 3px solid rgba(255, 255, 255, 0.3);
    border-top: 3px solid #4facfe;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin-bottom: 1rem;
  }
  &::before {
    content: 'üîç Analyzing your GitHub soul...';
    color: rgba(255, 255, 255, 0.8);
    font-size: 1.1rem;
    animation: ${pulse} 2s ease-in-out infinite;
  }
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
`;

const ErrorMessage = styled.div`
  background: rgba(220, 53, 69, 0.2);
  border: 1px solid rgba(220, 53, 69, 0.4);
  color: #ff6b7a;
  padding: 1.5rem;
  border-radius: 12px;
  text-align: center;
  margin: 2rem 0;
`;

const SectionTitle = styled.h2`
  font-size: 1.5rem;
  margin: 2rem 0 1.5rem 0;
  color: white;
  display: flex;
  align-items: center;
  gap: 0.5rem;
`;

const MetricRow = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 1.5rem;
  margin: 1.5rem 0;
`;

const MetricBox = styled.div`
  background: rgba(255, 255, 255, 0.05);
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 12px;
  padding: 1.5rem;
  text-align: center;
`;

const MetricTitle = styled.div`
  color: rgba(255, 255, 255, 0.8);
  font-size: 0.9rem;
  margin-bottom: 0.5rem;
`;

const MetricNumber = styled.div`
  font-size: 2rem;
  font-weight: 700;
  margin-bottom: 0.5rem;
  color: white;
`;

const PatternsList = styled.ul`
  list-style: none;
  padding: 0;
  margin: 1rem 0;
`;

const PatternItem = styled.li`
  display: flex;
  align-items: center;
  gap: 0.75rem;
  margin: 1rem 0;
  padding: 1rem;
  background: rgba(255, 255, 255, 0.05);
  border-radius: 8px;
`;

const PatternIcon = styled.span`
  font-size: 1.5rem;
`;

const PatternStrength = styled.div`
  font-size: 0.8rem;
  color: #4facfe;
  font-weight: 600;
`;

const PatternText = styled.div`
  flex: 1;
`;

const TopicTag = styled.span`
  background: rgba(79, 172, 254, 0.2);
  border: 1px solid rgba(79, 172, 254, 0.3);
  color: #4facfe;
  padding: 0.5rem 1rem;
  border-radius: 20px;
  font-size: 0.9rem;
  margin: 0.5rem;
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
`;

const TopicCount = styled.span`
  background: rgba(79, 172, 254, 0.4);
  padding: 0.2rem 0.5rem;
  border-radius: 10px;
  font-size: 0.7rem;
  font-weight: 600;
`;

const ActivityList = styled.div`
  max-height: 400px;
  overflow-y: auto;
`;

const ActivityItem = styled.div`
  background: rgba(255, 255, 255, 0.05);
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 8px;
  padding: 1rem;
  margin: 0.8rem 0;
`;

const ActivityContent = styled.div`
  color: rgba(255, 255, 255, 0.9);
  margin-bottom: 0.5rem;
`;

const ActivityMeta = styled.div`
  color: rgba(255, 255, 255, 0.6);
  font-size: 0.8rem;
  display: flex;
  justify-content: space-between;
`;

const AnalysisSection = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
  gap: 1.5rem;
  margin: 2rem 0;
`;

const FeatureCard = styled(Card)`
  text-align: center;
  padding: 2rem 1.5rem;
  margin-bottom: 1rem;
`;

const FeatureIcon = styled.div`
  font-size: 2.5rem;
  margin-bottom: 0.8rem;
  color: #4facfe;
`;

const FeatureTitle = styled.h3`
  font-size: 1.2rem;
  margin-bottom: 0.8rem;
  color: white;
`;

const FeatureDescription = styled.p`
  color: rgba(255, 255, 255, 0.8);
  line-height: 1.5;
  font-size: 0.9rem;
`;

// ----------- ANALYSIS HELPERS & LOGIC -----------
function analyzeText(text) {
  if (!text || typeof text !== "string" || text.trim().length === 0) {
    return {
      hostility: 0,
      formality: 0,
      sentiment: 0,
      toxicity: 0,
      constructiveness: 0,
      keywords: {},
      patterns: []
    };
  }
  const hostileWords = ["terrible", "wrong", "stupid", "awful", "hate", "useless", "idiot", "ridiculous"];
  const formalWords = ["therefore", "consequently", "furthermore", "however", "regards", "additionally"];
  const positiveWords = ["thanks", "great", "awesome", "helpful", "appreciate", "good", "excellent"];
  const negativeWords = ["bug", "issue", "problem", "error", "fail", "broken", "bad"];
  const toxicWords = ["stupid", "idiot", "useless", "terrible", "hate", "awful"];
  const constructiveWords = ["suggest", "perhaps", "consider", "improve", "help", "could", "maybe"];
  const words = text.toLowerCase().split(/\W+/).filter(Boolean);
  const wordCount = words.length || 1;
  const hostility = words.filter(w => hostileWords.includes(w)).length / wordCount;
  const formality = words.filter(w => formalWords.includes(w)).length / wordCount;
  const sentiment =
    (words.filter(w => positiveWords.includes(w)).length -
      words.filter(w => negativeWords.includes(w)).length) / wordCount;
  const toxicity = words.filter(w => toxicWords.includes(w)).length / wordCount;
  const constructiveness = words.filter(w => constructiveWords.includes(w)).length / wordCount;
  const patterns = [];
  if (hostility > 0.05) patterns.push('High hostility detected');
  if (formality > 0.1) patterns.push('Formal language used');
  if (sentiment < -0.1) patterns.push('Negative sentiment');
  if (toxicity > 0.02) patterns.push('Toxic language detected');
  if (constructiveness > 0.05) patterns.push('Constructive feedback');
  const stopWords = ['the', 'a', 'an', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for', 'of', 'with', 'by', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'do', 'does', 'did', 'will', 'would', 'should', 'could', 'can', 'may', 'might', 'must', 'shall', 'this', 'that', 'these', 'those', 'i', 'you', 'he', 'she', 'it', 'we', 'they', 'me', 'him', 'her', 'us', 'them'];
  const contentWords = words.filter(w => w.length > 3 && !stopWords.includes(w));
  const wordFreq = {};
  contentWords.forEach(w => { wordFreq[w] = (wordFreq[w] || 0) + 1; });
  return {
    hostility: Math.round(hostility * 100),
    formality: Math.round(formality * 100),
    sentiment: Math.round(sentiment * 100),
    toxicity: Math.round(toxicity * 100),
    constructiveness: Math.round(constructiveness * 100),
    keywords: wordFreq,
    patterns
  };
}

async function fetchUserActivity(username) {
  try {
    const eventsResponse = await fetch(`https://api.github.com/users/${username}/events/public?per_page=10`);
    const events = await eventsResponse.json();
    const reposResponse = await fetch(`https://api.github.com/users/${username}/repos?sort=updated&per_page=5`);
    const repos = await reposResponse.json();
    return { events: Array.isArray(events) ? events : [], repos: Array.isArray(repos) ? repos : [] };
  } catch {
    return { events: [], repos: [] };
  }
}

function analyzeBehaviorPatterns(events, repos, userData) {
  const patterns = [];
  const eventCount = Array.isArray(events) ? events.length : 0;
  if (eventCount > 7) {
    patterns.push({ icon: "üî•", color: '#ff6b47', text: 'Extremely Active Contributor', strength: 'Very Strong' });
  } else if (eventCount > 4) {
    patterns.push({ icon: "üìà", color: '#4ade80', text: 'Highly Active', strength: 'Strong' });
  } else if (eventCount > 1) {
    patterns.push({ icon: "‚ö°", color: '#fbbf24', text: 'Moderate Activity', strength: 'Moderate' });
  } else {
    patterns.push({ icon: "‚è∞", color: '#94a3b8', text: 'Low Activity', strength: 'Light' });
  }
  const collaborativeEvents = (Array.isArray(events) ? events : []).filter(e =>
    ['PullRequestEvent', 'IssuesEvent', 'IssueCommentEvent'].includes(e.type)
  );
  if (collaborativeEvents.length > 3) {
    patterns.push({ icon: "ü§ù", color: '#06b6d4', text: 'Team Player', strength: 'Strong' });
  } else if (collaborativeEvents.length > 0) {
    patterns.push({ icon: "üë•", color: '#8b5cf6', text: 'Collaborative', strength: 'Moderate' });
  }
  const avgStars = (Array.isArray(repos) && repos.length > 0)
    ? repos.reduce((sum, repo) => sum + repo.stargazers_count, 0) / repos.length
    : 0;
  if (avgStars > 15) {
    patterns.push({ icon: "‚≠ê", color: '#fbbf24', text: 'High-Quality Creator', strength: 'Excellent' });
  } else if (avgStars > 5) {
    patterns.push({ icon: "üåü", color: '#4facfe', text: 'Quality Contributor', strength: 'Good' });
  }
  const languages = new Set();
  (Array.isArray(repos) ? repos : []).forEach(repo => { if (repo.language) languages.add(repo.language); });
  if (languages.size > 4) {
    patterns.push({ icon: "üß†", color: '#ec4899', text: `Polyglot Programmer`, strength: 'Versatile' });
  } else if (languages.size > 2) {
    patterns.push({ icon: "üåê", color: '#8b5cf6', text: `Multi-Language Developer`, strength: 'Flexible' });
  }
  const wellDocumented = (Array.isArray(repos) ? repos : []).filter(repo => repo.description && repo.description.length > 30).length;
  if (wellDocumented > (repos.length || 1) * 0.7) {
    patterns.push({ icon: "üìñ", color: '#4ade80', text: 'Documentation Focused', strength: 'Professional' });
  }
  if (userData.followers > 100) {
    patterns.push({ icon: "üíñ", color: '#ef4444', text: `Community Influencer`, strength: 'Influential' });
  } else if (userData.followers > 20) {
    patterns.push({ icon: "üíó", color: '#f59e0b', text: `Growing Influence`, strength: 'Emerging' });
  }
  return { patterns };
}

function generateCommunicationMetrics(userData, analysis) {
  const baseMetrics = {
    toxicity: Math.round(Math.random() * 10),
    constructiveness: Math.round(Math.random() * 50 + 50),
    sentiment: Math.round(Math.random() * 60 - 20),
  };
  const activityScore = Math.min(100, Array.isArray(analysis.activity?.events) ? (analysis.activity.events.length || 0) * 10 : 0);
  const collaborativeEvents = Array.isArray(analysis.activity?.events)
    ? analysis.activity.events.filter(e =>
        ['PullRequestEvent', 'IssuesEvent', 'IssueCommentEvent'].includes(e.type)
      )
    : [];
  const collaborationScore = Math.min(100, collaborativeEvents.length * 15);
  return {
    ...baseMetrics,
    engagement: activityScore,
    collaboration: collaborationScore,
  };
}
function getCognitiveBehavior(events) {
  if (!Array.isArray(events) || events.length === 0) return null;
  const hours = events.map(e => new Date(e.created_at).getUTCHours());
  const nightCount = hours.filter(h => h >= 20 || h < 6).length;
  const dayCount = hours.filter(h => h >= 6 && h < 20).length;
  if (nightCount > dayCount) {
    return { type: 'night', text: 'Night Owl üåôü¶â', detail: 'Most activity happens late at night.' };
  } else if (dayCount > nightCount) {
    return { type: 'early', text: 'Early Bird üåûüê¶', detail: 'Most activity happens during the day.' };
  } else {
    return { type: 'mixed', text: 'Balanced ‚òØÔ∏è', detail: 'Activity is evenly spread out.' };
  }
}
function generateBehavioralInsights(userData, analysis, activityEvents) {
  const insights = [];
  // Add cognitive behavior analysis
  const cognitiveBehavior = getCognitiveBehavior(activityEvents);
  if (cognitiveBehavior) {
    insights.push(`${cognitiveBehavior.text} - ${cognitiveBehavior.detail}`);
  }
  if (userData.followers > 50) {
    insights.push('You have a strong community presence and influence.');
  }
  if ((Array.isArray(analysis.activity?.repos) ? analysis.activity.repos.length : 0) > 4) {
    insights.push('You maintain several active repositories, showing commitment.');
  }
  if ((Array.isArray(analysis.activity?.events) ? analysis.activity.events.length : 0) > 7) {
    insights.push('Your recent GitHub activity is impressive.');
  }
  if (analysis.toxicity < 5) {
    insights.push('Your communication style is positive and respectful.');
  }
  if (analysis.constructiveness > 70) {
    insights.push('You provide helpful, constructive feedback.');
  }
  return insights;
}

function generateDiscussionTopics(repos, events) {
  const topics = {};
  (Array.isArray(repos) ? repos : []).forEach(repo => {
    if (repo.language) topics[repo.language] = (topics[repo.language] || 0) + 3;
    const repoWords = repo.name.toLowerCase().split(/[-_\s]+/);
    repoWords.forEach(word => { if (word.length > 3) topics[word] = (topics[word] || 0) + 2; });
    if (repo.description) {
      const descWords = repo.description.toLowerCase().split(/\W+/).filter(w => w.length > 4);
      descWords.slice(0, 3).forEach(word => { topics[word] = (topics[word] || 0) + 1; });
    }
  });
  ['development', 'programming', 'software', 'code', 'project', 'technology'].forEach(topic => {
    if (!topics[topic]) topics[topic] = Math.floor(Math.random() * 3) + 1;
  });
  return topics;
}

function App() {
  const [username, setUsername] = useState('');
  const [userData, setUserData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [analysis, setAnalysis] = useState(null);

  const handleSearch = async () => {
    if (!username.trim()) {
      setError('Please enter a GitHub username');
      return;
    }
    setLoading(true); setError(null); setUserData(null); setAnalysis(null);
    try {
      const response = await fetch(`https://api.github.com/users/${username}`);
      if (!response.ok) throw new Error('User not found');
      const user = await response.json();
      const activity = await fetchUserActivity(username);
      const behaviorAnalysis = analyzeBehaviorPatterns(activity.events, activity.repos, user);
      const sampleText = `Thanks for the great work on this project! I think we could improve the documentation to make it more accessible. Perhaps we could add more examples and consider restructuring the API guide. This would help new contributors understand the codebase better.`;
      const textAnalysis = analyzeText(sampleText);
      const discussionTopics = generateDiscussionTopics(activity.repos, activity.events);
      setUserData(user);
      setAnalysis({
        ...textAnalysis,
        patterns: [...textAnalysis.patterns, ...behaviorAnalysis.patterns],
        activity: activity,
        discussionTopics: discussionTopics
      });
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleKeyPress = e => { if (e.key === 'Enter') handleSearch(); };

  const activityEvents = analysis && analysis.activity && Array.isArray(analysis.activity.events) ? analysis.activity.events : [];
  const activityRepos = analysis && analysis.activity && Array.isArray(analysis.activity.repos) ? analysis.activity.repos : [];
  const behavioralInsights = (userData && analysis) ? generateBehavioralInsights(userData, analysis, activityEvents) : [];
  return (
    <>
      {/* Animated Mirror Background */}
      <MirrorBackground>
        <MirrorEmoji top="10%" left="15%" size="2rem" direction="right" duration="6s" delay="0s">‚ú®</MirrorEmoji>
        <MirrorEmoji top="25%" left="80%" size="2.5rem" direction="left" duration="5s" delay="1s">‚≠ê</MirrorEmoji>
        <MirrorEmoji top="40%" left="25%" size="2.2rem" direction="right" duration="7s" delay="2s">üåü</MirrorEmoji>
        <MirrorEmoji top="60%" left="75%" size="1.8rem" direction="left" duration="4s" delay="0.5s">üí´</MirrorEmoji>
        <MirrorEmoji top="80%" left="40%" size="2.8rem" direction="right" duration="6s" delay="3s">‚ö°</MirrorEmoji>
        <MirrorEmoji top="15%" left="60%" size="2rem" direction="left" duration="5.5s" delay="1.5s">üî•</MirrorEmoji>
        <MirrorEmoji top="70%" left="20%" size="1.8rem" direction="right" duration="4.5s" delay="2.5s">üíé</MirrorEmoji>
        <MirrorEmoji top="35%" left="90%" size="2.3rem" direction="left" duration="6.5s" delay="0.8s">üéØ</MirrorEmoji>
        <MirrorEmoji top="55%" left="5%" size="2.1rem" direction="right" duration="5.2s" delay="3.2s">üöÄ</MirrorEmoji>
        <MirrorEmoji top="85%" left="70%" size="1.9rem" direction="left" duration="4.8s" delay="1.8s">üåà</MirrorEmoji>
      </MirrorBackground>

      <Container>
        <Header>
          <LogoWrap>
            <CatLogo size={100} color="#4fc3f7" />
          </LogoWrap>
          <Title>ReflectoCat</Title>
          <Subtitle> ü™û A playful mirror for your GitHub voice. ü™û</Subtitle>
        </Header>
        <SearchSection>
          <SearchContainer>
            <SearchIcon>üîé</SearchIcon>
            <SearchInput
              type="text"
              placeholder="Enter GitHub username..."
              value={username}
              onChange={e => setUsername(e.target.value)}
              onKeyPress={handleKeyPress}
            />
          </SearchContainer>
          <SearchButton onClick={handleSearch} disabled={loading}>
            {loading ? 'Analyzing...' : 'Analyze User'}
            <span role="img" aria-label="profile">üë§</span>
          </SearchButton>
        </SearchSection>

        <Dashboard>
          {error && <ErrorMessage>{error}</ErrorMessage>}
          {loading && <LoadingSpinner />}
          {userData && analysis && (
            <>
              <Card>
                <UserProfile>
                  <Avatar src={userData.avatar_url} alt={userData.name || userData.login} />
                  <UserInfo>
                    <UserName>{userData.name || userData.login}</UserName>
                    <UserBio>{userData.bio || 'No bio available'}</UserBio>
                    <UserStats>
                      <Stat>üë• {userData.followers} followers</Stat>
                      <Stat>üìö {userData.public_repos} repositories</Stat>
                      <Stat>üìÖ Joined {new Date(userData.created_at).getFullYear()}</Stat>
                    </UserStats>
                  </UserInfo>
                </UserProfile>
              </Card>

              <SectionTitle>üí¨ Communication Analysis üí¨ </SectionTitle>
              <MetricRow>
                {Object.entries(generateCommunicationMetrics(userData, analysis)).map(([key, value]) => (
                  <MetricBox key={key}>
                    <MetricTitle>
                      {key === 'toxicity' && 'Toxicity Level'}
                      {key === 'constructiveness' && 'Constructiveness'}
                      {key === 'sentiment' && 'Sentiment Score'}
                      {key === 'engagement' && 'Engagement Level'}
                      {key === 'collaboration' && 'Collaboration'}
                    </MetricTitle>
                    <MetricNumber>{value}%</MetricNumber>
                  </MetricBox>
                ))}
              </MetricRow>

              <SectionTitle>üß¨ Behavioral Patterns üß¨ </SectionTitle>
              <Card>
                <PatternsList>
                  {Array.isArray(analysis.patterns) && analysis.patterns.map((pattern, index) => (
                    <PatternItem key={index}>
                      <PatternIcon>{pattern.icon}</PatternIcon>
                      <PatternText>{pattern.text}</PatternText>
                      <PatternStrength>{pattern.strength}</PatternStrength>
                    </PatternItem>
                  ))}
                </PatternsList>
              </Card>

              <SectionTitle>üí° Behavioral Insights</SectionTitle>
              <Card>
                <div style={{marginBottom: "1rem", color: "rgba(255,255,255,0.6)", fontSize: "0.9rem"}}>
                  Analysis generated on {new Date().toLocaleDateString()}
                </div>
                <ul style={{margin: 0, padding: 0, listStyle: "none"}}>
                  {behavioralInsights.map((insight, idx) =>
                    <li key={idx} style={{marginBottom: "0.5rem"}}>‚û§ {insight}</li>
                  )}
                  {behavioralInsights.length === 0 && <li>No major insights detected from recent activity.</li>}
                </ul>
              </Card>

              <SectionTitle>üè∑Ô∏è Most Discussed Topics</SectionTitle>
              <Card>
                <div style={{ display: 'flex', flexWrap: 'wrap', gap: '0.5rem' }}>
                  {Object.entries(analysis.discussionTopics || {})
                    .sort(([, a], [, b]) => b - a)
                    .slice(0, 15)
                    .map(([topic, count]) => (
                      <TopicTag key={topic}>
                        #{topic}
                        <TopicCount>{count}</TopicCount>
                      </TopicTag>
                    ))}
                </div>
              </Card>

              <SectionTitle>‚ö° Recent Activity</SectionTitle>
              <AnalysisSection>
                <Card>
                  <SectionTitle>‚è∞ Latest Events</SectionTitle>
                  <ActivityList>
                    {activityEvents.length > 0 ? (
                      activityEvents.slice(0, 5).map((event, index) => (
                        <ActivityItem key={index}>
                          <ActivityContent>
                            <strong>{event.type.replace('Event', '')}</strong>
                            {event.repo && ` in ${event.repo.name}`}
                            {event.payload && event.payload.action && ` - ${event.payload.action}`}
                          </ActivityContent>
                          <ActivityMeta>
                            <span>{new Date(event.created_at).toLocaleDateString()}</span>
                            <span>{event.type}</span>
                          </ActivityMeta>
                        </ActivityItem>
                      ))
                    ) : (
                      <ActivityItem>
                        <ActivityContent>No recent public activity found</ActivityContent>
                      </ActivityItem>
                    )}
                  </ActivityList>
                </Card>
                <Card>
                  <SectionTitle>üìö Recent Repositories</SectionTitle>
                  <div>
                    {activityRepos.length > 0 ? (
                      activityRepos.slice(0, 3).map((repo, index) => (
                        <div key={index} style={{ marginBottom: '1rem', padding: '1rem', background: 'rgba(255,255,255,0.05)', borderRadius: '8px' }}>
                          <h4 style={{ color: '#4facfe', margin: '0 0 0.5rem 0' }}>{repo.name}</h4>
                          <p style={{ color: 'rgba(255,255,255,0.8)', margin: '0 0 0.5rem 0', fontSize: '0.9rem' }}>
                            {repo.description || 'No description available'}
                          </p>
                          <div style={{ display: 'flex', gap: '1rem', fontSize: '0.8rem', color: 'rgba(255,255,255,0.6)' }}>
                            {repo.language && <span>üîµ {repo.language}</span>}
                            <span>‚≠ê {repo.stargazers_count}</span>
                            <span>üç¥ {repo.forks_count}</span>
                            <span>Updated: {new Date(repo.updated_at).toLocaleDateString()}</span>
                          </div>
                        </div>
                      ))
                    ) : (
                      <div style={{ padding: '1rem', color: 'rgba(255,255,255,0.6)' }}>
                        No recent repositories found
                      </div>
                    )}
                  </div>
                </Card>
              </AnalysisSection>
            </>
          )}

          {/* Feature cards for first-time visit */}
          {!userData && !loading && !error && (
            <AnalysisSection>
              <FeatureCard>
                <FeatureIcon>üë§</FeatureIcon>
                <FeatureTitle>Profile Analysis</FeatureTitle>
                <FeatureDescription>
                  Get comprehensive insights into any GitHub user's profile
                </FeatureDescription>
              </FeatureCard>
              <FeatureCard>
                <FeatureIcon>üìà</FeatureIcon>
                <FeatureTitle>Repository Metrics</FeatureTitle>
                <FeatureDescription>
                  Analyze profile activity stats
                </FeatureDescription>
              </FeatureCard>
              <FeatureCard>
                <FeatureIcon>üí¨</FeatureIcon>
                <FeatureTitle>Activity Tracking</FeatureTitle>
                <FeatureDescription>
                  Track commits, issues, pull requests, and more to understand development patterns
                </FeatureDescription>
              </FeatureCard>
            </AnalysisSection>
          )}
        </Dashboard>
      </Container>
    </>
  );
}

export default App;import React, { useState } from 'react';
import styled, { keyframes, createGlobalStyle } from 'styled-components';

const GlobalStyle = createGlobalStyle`
  @import url('https://fonts.googleapis.com/css2?family=Dancing+Script:wght@400;500;600;700&display=swap');
 
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Noto Sans', Helvetica, Arial, sans-serif;
    line-height: 1.6;
    color: #e6edf3;
    background: linear-gradient(135deg, #0d1117 0%, #161b22 50%, #21262d 100%);
    min-height: 100vh;
    overflow-x: hidden;
  }

  html, body, #root {
    height: 100%;
  }
`;

const twinkle = keyframes`
  0% { opacity: 0; transform: scale(0.5); }
  50% { opacity: 1; transform: scale(1); }
  100% { opacity: 0; transform: scale(0.5); }
`;

const StarField = styled.div`
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 1;
`;

const Star = styled.div`
  position: absolute;
  width: 2px;
  height: 2px;
  background: #58a6ff;
  border-radius: 50%;
  animation: ${twinkle} ${props => props.duration}s infinite;
  animation-delay: ${props => props.delay}s;
  left: ${props => props.left}%;
  top: ${props => props.top}%;
  box-shadow: 0 0 6px #58a6ff;
`;

const Container = styled.div`
  min-height: 100vh;
  padding: 2rem;
  position: relative;
  z-index: 2;
`;

const HeroSection = styled.section`
  width: 100%;
  max-width: 1400px;
  margin: 0 auto;
  background: rgba(33, 38, 45, 0.6);
  backdrop-filter: blur(10px);
  border: 1px solid #30363d;
  border-radius: 8px;
  padding: 1.5rem;
  text-align: center;
  margin-bottom: 2rem;
  box-shadow: 0 4px 20px rgba(0,0,0,0.3);
`;

const HeroTitle = styled.h1`
  font-family: 'Dancing Script', cursive;
  font-size: 3.2rem;
  font-weight: 700;
  color: #58a6ff;
  margin-bottom: 0.6rem;
  text-shadow: 0 0 20px rgba(88, 166, 255, 0.5);
  letter-spacing: 0.1em;
 
  @media (max-width: 768px) {
    font-size: 2.5rem;
  }
`;

const HeroSubtitle = styled.p`
  font-family: 'Dancing Script', cursive;
  font-size: 1.4rem;
  font-weight: bold;
  color: #ffffff;
  text-shadow: 0 2px 4px rgba(0,0,0,0.5);
  letter-spacing: 0.05em;
 
  @media (max-width: 768px) {
    font-size: 1.2rem;
  }
`;

const ReflectoCatLogo = styled.div`
  width: 160px;
  height: 96px;
  margin: 0 auto 1rem;
  animation: float 3s ease-in-out infinite;
  display: flex;
  align-items: center;
  justify-content: center;
 
  svg {
    width: 100%;
    height: 100%;
  }
 
  @keyframes float {
    0%, 100% { transform: translateY(0px); }
    50% { transform: translateY(-8px); }
  }
`;

const Header = styled.header`
  text-align: center;
  margin-bottom: 3rem;
  animation: fadeInDown 1s ease-out;
  display: flex;
  flex-direction: column;
  align-items: center;
  max-width: 1400px;
  margin-left: auto;
  margin-right: auto;
`;

const SearchContainer = styled.div`
  display: flex;
  gap: 1rem;
  margin-bottom: 2rem;
  max-width: 500px;
  width: 100%;
 
  @media (max-width: 768px) {
    flex-direction: column;
    gap: 1rem;
  }
`;

const Input = styled.input`
  flex: 1;
  padding: 1rem 1.5rem;
  border: 2px solid #30363d;
  border-radius: 8px;
  font-size: 1.1rem;
  background: #21262d;
  color: #e6edf3;
  box-shadow: 0 4px 15px rgba(0,0,0,0.3);
  transition: all 0.3s ease;
 
  &:focus {
    outline: none;
    border-color: #58a6ff;
    box-shadow: 0 0 0 3px rgba(88, 166, 255, 0.1);
    transform: translateY(-2px);
  }
 
  &::placeholder {
    color: #7d8590;
  }
`;

const Button = styled.button`
  padding: 1rem 2rem;
  background: linear-gradient(45deg, #238636, #2ea043);
  color: white;
  border: none;
  border-radius: 8px;
  font-size: 1.1rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  box-shadow: 0 4px 15px rgba(0,0,0,0.3);
 
  &:hover {
    background: linear-gradient(45deg, #2ea043, #238636);
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(0,0,0,0.4);
  }
 
  &:disabled {
    opacity: 0.7;
    cursor: not-allowed;
    transform: none;
  }
 
  @media (max-width: 768px) {
    width: 100%;
  }
`;

const ProfileHeader = styled.section`
  width: 100%;
  max-width: 1400px;
  margin: 0 auto 2rem;
  background: #000000;
  backdrop-filter: blur(10px);
  border: 1px solid #30363d;
  border-radius: 8px;
  padding: 0.8rem;
  text-align: center;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5);
  position: relative;
`;

const ProfileAvatar = styled.img`
  width: 40px;
  height: 40px;
  border-radius: 50%;
  border: 2px solid #58a6ff;
  margin-bottom: 0.5rem;
  box-shadow: 0 0 10px rgba(88, 166, 255, 0.3);
  transition: all 0.3s ease;
 
  &:hover {
    transform: scale(1.05);
    box-shadow: 0 0 15px rgba(88, 166, 255, 0.5);
  }
 
  @media (max-width: 768px) {
    width: 35px;
    height: 35px;
  }
`;

const ProfileName = styled.h2`
  font-size: 1.2rem;
  color: #ffffff;
  margin-bottom: 0.2rem;
  font-weight: 600;
  text-shadow: 0 1px 2px rgba(0,0,0,0.5);
 
  @media (max-width: 768px) {
    font-size: 1rem;
  }
`;

const ProfileUsername = styled.h3`
  font-size: 0.9rem;
  color: #58a6ff;
  margin-bottom: 0.5rem;
  font-weight: 400;
 
  @media (max-width: 768px) {
    font-size: 0.8rem;
  }
`;

const ProfileBio = styled.p`
  font-size: 0.7rem;
  color: #7d8590;
  line-height: 1.3;
  max-width: 400px;
  margin: 0 auto 0.8rem;
  font-style: italic;
 
  @media (max-width: 768px) {
    font-size: 0.65rem;
  }
`;

const ProfileStats = styled.div`
  display: flex;
  justify-content: center;
  gap: 0.8rem;
  margin-top: 0.5rem;
  flex-wrap: wrap;
`;

const ProfileStatItem = styled.div`
  text-align: center;
  background: rgba(13, 17, 23, 0.8);
  padding: 0.4rem 0.6rem;
  border-radius: 4px;
  border: 1px solid #30363d;
  min-width: 50px;
  transition: all 0.3s ease;
 
  &:hover {
    border-color: #58a6ff;
    transform: translateY(-1px);
    box-shadow: 0 2px 6px rgba(0,0,0,0.3);
  }
`;

const ProfileStatValue = styled.div`
  font-size: 0.9rem;
  font-weight: 700;
  color: #58a6ff;
  margin-bottom: 0.1rem;
 
  @media (max-width: 768px) {
    font-size: 0.8rem;
  }
`;

const ProfileStatLabel = styled.div`
  font-size: 0.6rem;
  color: #7d8590;
  font-weight: 500;
  text-transform: uppercase;
  letter-spacing: 0.3px;
`;

const Dashboard = styled.div`
  background: rgba(33, 38, 45, 0.95);
  backdrop-filter: blur(10px);
  border: 1px solid #30363d;
  border-radius: 12px;
  padding: 2rem;
  box-shadow: 0 8px 32px rgba(0,0,0,0.4);
  max-width: 1400px;
  width: 100%;
  margin: 0 auto;
  animation: fadeInUp 0.8s ease-out;
  display: flex;
  gap: 1.5rem;
 
  @media (max-width: 768px) {
    flex-direction: column;
    padding: 1.5rem;
    margin: 1rem;
    gap: 1rem;
  }
`;

const SideContent = styled.div`
  width: 280px;
 
  @media (max-width: 768px) {
    width: 100%;
  }
`;

const LiveUserStats = styled.div`
  background: rgba(13, 17, 23, 0.8);
  border: 1px solid #30363d;
  border-radius: 6px;
  padding: 1rem;
  box-shadow: 0 4px 20px rgba(0,0,0,0.3);
  margin-bottom: 2rem;
  position: static;
`;

const LiveStatsTitle = styled.h4`
  font-size: 0.9rem;
  color: #58a6ff;
  margin-bottom: 0.8rem;
  display: flex;
  align-items: center;
  gap: 0.4rem;
  font-weight: 600;
`;

const LiveStatsItem = styled.div`
  font-size: 0.8rem;
  color: #e6edf3;
  margin-bottom: 0.6rem;
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 0.4rem 0;
  border-bottom: 1px solid rgba(48, 54, 61, 0.5);
 
  &:last-child {
    border-bottom: none;
    margin-bottom: 0;
  }
`;

const StatLabel = styled.span`
  color: #7d8590;
  font-size: 0.75rem;
`;

const StatValue = styled.span`
  font-weight: 600;
  color: #58a6ff;
  font-size: 0.8rem;
`;

const LastActivitySection = styled.div`
  background: rgba(13, 17, 23, 0.8);
  border: 1px solid #30363d;
  border-radius: 8px;
  padding: 1.5rem;
  margin-bottom: 2rem;
`;

const LastActivityTitle = styled.h4`
  font-size: 1.1rem;
  color: #58a6ff;
  margin-bottom: 1rem;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-weight: 600;
`;

const LastActivityItem = styled.div`
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
  padding: 1rem;
  background: rgba(33, 38, 45, 0.5);
  border-radius: 6px;
  border-left: 3px solid ${props => props.eventColor || '#58a6ff'};
`;

const ActivityHeader = styled.div`
  display: flex;
  align-items: center;
  gap: 0.5rem;
  flex-wrap: wrap;
`;

const ActivityType = styled.span`
  background: #58a6ff;
  color: #0d1117;
  padding: 0.2rem 0.4rem;
  border-radius: 3px;
  font-size: 0.7rem;
  font-weight: 600;
  margin-right: 0.5rem;
`;

const ActivityRepo = styled.span`
  color: #58a6ff;
  font-weight: 600;
  font-size: 0.85rem;
`;

const ActivityTime = styled.span`
  color: #7d8590;
  font-size: 0.75rem;
  font-style: italic;
`;

const ActivityDetails = styled.div`
  color: #e6edf3;
  font-size: 0.85rem;
  line-height: 1.4;
`;

const MainContent = styled.div`
  flex: 1;
`;

const SectionContainer = styled.div`
  margin-bottom: 2rem;
`;

const SectionTitle = styled.h3`
  font-size: 1.2rem;
  color: #e6edf3;
  margin-bottom: 0.8rem;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  border-bottom: 1px solid #30363d;
  padding-bottom: 0.3rem;
`;

const AnalysisGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 1rem;
`;

const MetricCard = styled.div`
  background: linear-gradient(135deg, #161b22 0%, #0d1117 100%);
  padding: 1rem;
  border-radius: 6px;
  border: 1px solid #30363d;
  border-left: 3px solid ${props => props.color || '#58a6ff'};
  transition: transform 0.2s ease, box-shadow 0.2s ease;
 
  &:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(0,0,0,0.3);
    border-left-color: ${props => props.color || '#58a6ff'};
  }
`;

const MetricTitle = styled.h3`
  font-size: 0.85rem;
  color: #e6edf3;
  margin-bottom: 0.3rem;
  display: flex;
  align-items: center;
  gap: 0.3rem;
  font-weight: 600;
`;

const MetricValue = styled.div`
  font-size: 1rem;
  font-weight: 700;
  color: ${props => props.color || '#58a6ff'};
  margin-bottom: 0.3rem;
`;

const MetricDescription = styled.p`
  color: #7d8590;
  font-size: 0.75rem;
  line-height: 1.3;
`;

const CulturalInsightsContainer = styled.div`
  background: linear-gradient(135deg, #161b22 0%, #0d1117 100%);
  border: 1px solid #30363d;
  border-radius: 12px;
  padding: 2rem;
  margin-bottom: 2rem;
`;

const InsightsGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
  gap: 1.5rem;
  margin-top: 1.5rem;
`;

const InsightCard = styled.div`
  background: rgba(33, 38, 45, 0.8);
  border: 1px solid #30363d;
  border-radius: 8px;
  padding: 1.5rem;
  position: relative;
  border-left: 4px solid ${props => props.color || '#58a6ff'};
  transition: all 0.3s ease;
 
  &:hover {
    transform: translateY(-3px);
    box-shadow: 0 6px 25px rgba(0,0,0,0.4);
  }
`;

const InsightTitle = styled.h4`
  font-size: 1rem;
  color: #e6edf3;
  margin-bottom: 0.8rem;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-weight: 600;
`;

const InsightIcon = styled.span`
  font-size: 1.2rem;
  opacity: 0.8;
`;

const InsightContent = styled.div`
  color: #c9d1d9;
  font-size: 0.9rem;
  line-height: 1.5;
  margin-bottom: 1rem;
`;

const InsightMetrics = styled.div`
  display: flex;
  gap: 1rem;
  flex-wrap: wrap;
`;

const InsightMetric = styled.div`
  background: rgba(13, 17, 23, 0.6);
  padding: 0.5rem 0.8rem;
  border-radius: 6px;
  border: 1px solid #30363d;
  font-size: 0.8rem;
`;

const MetricLabel = styled.span`
  color: #7d8590;
  display: block;
  font-size: 0.7rem;
  margin-bottom: 0.2rem;
`;

const MetricData = styled.span`
  color: ${props => props.color || '#58a6ff'};
  font-weight: 600;
`;

const BehaviorPatternList = styled.div`
  margin-top: 2rem;
`;

const BehaviorPattern = styled.div`
  display: flex;
  align-items: center;
  gap: 0.8rem;
  padding: 0.8rem 0;
  border-bottom: 1px solid rgba(48, 54, 61, 0.3);
 
  &:last-child {
    border-bottom: none;
  }
`;

const PatternIcon = styled.span`
  font-size: 1.1rem;
  width: 24px;
  text-align: center;
`;

const PatternText = styled.span`
  flex: 1;
  color: #c9d1d9;
  font-size: 0.85rem;
`;

const PatternStrength = styled.span`
  background: rgba(88, 166, 255, 0.2);
  color: #58a6ff;
  padding: 0.2rem 0.5rem;
  border-radius: 4px;
  font-size: 0.7rem;
  font-weight: 600;
`;

const LoadingContainer = styled.div`
  display: flex;
  align-items: center;
  justify-content: center;
  min-height: 300px;
  font-size: 1.2rem;
  color: #58a6ff;
  max-width: 1400px;
  margin: 0 auto;
`;

const ErrorContainer = styled.div`
  background: rgba(248, 81, 73, 0.1);
  border: 1px solid #f85149;
  border-radius: 8px;
  padding: 1.5rem;
  margin: 1rem auto;
  color: #f85149;
  text-align: center;
  max-width: 1400px;
`;

const App = () => {
  const [username, setUsername] = useState('');
  const [userData, setUserData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const createStars = () => {
    const stars = [];
    for (let i = 0; i < 50; i++) {
      stars.push(
        <Star
          key={i}
          left={Math.random() * 100}
          top={Math.random() * 100}
          duration={2 + Math.random() * 3}
          delay={Math.random() * 2}
        />
      );
    }
    return stars;
  };

  const getPersonalityColor = (level) => {
    if (level === 'High') return '#2ea043';
    if (level === 'Medium') return '#fb8500';
    return '#f85149';
  };

  const analyzeCulturalPatterns = (user, repos, events) => {
    const insights = [];
   
    // 1. Issue Engagement Analysis
    const issueEvents = events.filter(e => e.type === 'IssuesEvent');
    const issueActions = issueEvents.map(e => e.payload.action).filter(Boolean);
    const issueOpened = issueActions.filter(a => a === 'opened').length;
    const issueClosed = issueActions.filter(a => a === 'closed').length;
    
    let issueEngagementLevel = 'Low';
    let issueDescription = 'Limited issue tracking engagement';
    let issueColor = '#6c757d';
    
    if (issueEvents.length > 10) {
      issueEngagementLevel = 'High';
      issueDescription = 'Actively engages with issue tracking and discussions';
      issueColor = '#2ea043';
    } else if (issueEvents.length > 5) {
      issueEngagementLevel = 'Moderate';
      issueDescription = 'Regular involvement in issue management';
      issueColor = '#fb8500';
    }

    insights.push({
      title: 'Issue Engagement',
      icon: 'üéØ',
      color: issueColor,
      pattern: issueEngagementLevel,
      description: issueDescription,
      metrics: {
        totalIssues: issueEvents.length,
        opened: issueOpened,
        closed: issueClosed,
        ratio: issueOpened > 0 ? Math.round((issueClosed / issueOpened) * 100) / 100 : 0
      }
    });

    // 2. Pull Request Activity Patterns
    const prEvents = events.filter(e => e.type === 'PullRequestEvent');
    const prReviewEvents = events.filter(e => e.type === 'PullRequestReviewEvent');
    const prActions = prEvents.map(e => e.payload.action).filter(Boolean);
    const prOpened = prActions.filter(a => a === 'opened').length;
    
    let prActivityLevel = 'Minimal';
    let prDescription = 'Limited pull request activity';
    let prColor = '#6c757d';
    
    if (prEvents.length > 15 || prReviewEvents.length > 5) {
      prActivityLevel = 'Highly Active';
      prDescription = 'Very engaged in code review and collaboration processes';
      prColor = '#2ea043';
    } else if (prEvents.length > 5 || prReviewEvents.length > 2) {
      prActivityLevel = 'Moderate';
      prDescription = 'Regular participation in pull request workflows';
      prColor = '#fb8500';
    }

    insights.push({
      title: 'Pull Request Activity',
      icon: 'üîÑ',
      color: prColor,
      pattern: prActivityLevel,
      description: prDescription,
      metrics: {
        totalPRs: prEvents.length,
        reviews: prReviewEvents.length,
        opened: prOpened,
        avgPerMonth: Math.round((prEvents.length / 3) * 10) / 10
      }
    });

    // 3. Primary Language Detection & Project Focus
    const languageCount = {};
    repos.forEach(repo => {
      if (repo.language) {
        languageCount[repo.language] = (languageCount[repo.language] || 0) + 1;
      }
    });
    
    const sortedLanguages = Object.entries(languageCount)
      .sort(([,a], [,b]) => b - a);
    const primaryLanguage = sortedLanguages[0]?.[0] || 'Unknown';
    const languageDiversity = Object.keys(languageCount).length;
    
    let projectFocus = 'Specialized';
    let focusDescription = 'Focused on specific technology stack';
    let focusColor = '#58a6ff';
    
    if (languageDiversity > 8) {
      projectFocus = 'Polyglot';
      focusDescription = 'Works with diverse programming languages and technologies';
      focusColor = '#e74c3c';
    } else if (languageDiversity > 4) {
      projectFocus = 'Multi-stack';
      focusDescription = 'Comfortable with multiple programming languages';
      focusColor = '#f39c12';
    }

    insights.push({
      title: 'Language & Project Focus',
      icon: 'üíª',
      color: focusColor,
      pattern: projectFocus,
      description: focusDescription,
      metrics: {
        primaryLang: primaryLanguage,
        totalLangs: languageDiversity,
        diversity: `${Math.round((languageDiversity / repos.length) * 100)}%`,
        topThree: sortedLanguages.slice(0, 3).map(([lang]) => lang).join(', ')
      }
    });

    // 4. Time-based Work Patterns
    const workingHours = events.map(e => {
      const hour = new Date(e.created_at).getHours();
      return hour;
    });
   
    const nightOwlActivity = workingHours.filter(h => h >= 22 || h <= 6).length;
    const earlyBirdActivity = workingHours.filter(h => h >= 6 && h <= 9).length;
    const standardHours = workingHours.filter(h => h >= 9 && h <= 17).length;
    const eveningHours = workingHours.filter(h => h >= 17 && h <= 22).length;
   
    let temporalPattern = 'Balanced';
    let temporalDescription = 'Activity spread across different time periods';
    let temporalColor = '#58a6ff';
   
    if (nightOwlActivity > Math.max(earlyBirdActivity, standardHours, eveningHours)) {
      temporalPattern = 'Night Owl';
      temporalDescription = 'Most productive during late night hours (22:00-06:00)';
      temporalColor = '#9d4edd';
    } else if (earlyBirdActivity > Math.max(nightOwlActivity, standardHours, eveningHours)) {
      temporalPattern = 'Early Bird';
      temporalDescription = 'Peak productivity in morning hours (06:00-09:00)';
      temporalColor = '#fca311';
    } else if (standardHours > Math.max(nightOwlActivity, earlyBirdActivity, eveningHours)) {
      temporalPattern = 'Business Hours';
      temporalDescription = 'Most active during standard work hours (09:00-17:00)';
      temporalColor = '#2ea043';
    } else if (eveningHours > Math.max(nightOwlActivity, earlyBirdActivity, standardHours)) {
      temporalPattern = 'Evening Developer';
      temporalDescription = 'Prefers evening coding sessions (17:00-22:00)';
      temporalColor = '#ff6b6b';
    }

    insights.push({
      title: 'Work Time Patterns',
      icon: 'üïê',
      color: temporalColor,
      pattern: temporalPattern,
      description: temporalDescription,
      metrics: {
        nightActivity: `${Math.round((nightOwlActivity / workingHours.length) * 100)}%`,
        dayActivity: `${Math.round((standardHours / workingHours.length) * 100)}%`,
        morningActivity: `${Math.round((earlyBirdActivity / workingHours.length) * 100)}%`,
        eveningActivity: `${Math.round((eveningHours / workingHours.length) * 100)}%`
      }
    });

    // 5. Communication Style Analysis
    const repoDescriptions = repos.map(r => r.description || '').filter(Boolean);
    const avgDescLength = repoDescriptions.reduce((sum, desc) => sum + desc.length, 0) / repoDescriptions.length || 0;
    const hasReadme = repos.filter(r => r.description && r.description.length > 20).length;
    const documentationRate = (hasReadme / repos.length) * 100;
    
    let communicationStyle = 'Minimal';
    let communicationDescription = 'Basic documentation approach';
    let communicationColor = '#6c757d';
   
    if (documentationRate > 75 && avgDescLength > 50) {
      communicationStyle = 'Articulate';
      communicationDescription = 'Clear, detailed, and comprehensive communication';
      communicationColor = '#2ea043';
    } else if (documentationRate > 50 && avgDescLength > 25) {
      communicationStyle = 'Moderate';
      communicationDescription = 'Adequate documentation with clear explanations';
      communicationColor = '#fb8500';
    }

    insights.push({
      title: 'Communication Style',
      icon: 'üìù',
      color: communicationColor,
      pattern: communicationStyle,
      description: communicationDescription,
      metrics: {
        documented: `${Math.round(documentationRate)}%`,
        avgLength: Math.round(avgDescLength),
        formality: 'Semi-formal',
        expressiveness: Math.floor(Math.random() * 10)
      }
    });

    // 6. Work Philosophy
    const experimentalRepos = repos.filter(r => 
      r.name?.toLowerCase().includes('experiment') ||
      r.name?.toLowerCase().includes('prototype') ||
      r.description?.toLowerCase().includes('experiment')
    );
    
    let workPhilosophy = 'Balanced';
    let philosophyDescription = 'Mix of different project approaches';
    let philosophyColor = '#58a6ff';
    
    if (experimentalRepos.length > repos.length * 0.3) {
      workPhilosophy = 'Experimental';
      philosophyDescription = 'Enjoys prototyping and exploring new ideas';
      philosophyColor = '#e74c3c';
    }

    insights.push({
      title: 'Work Philosophy',
      icon: 'üöÄ',
      color: philosophyColor,
      pattern: workPhilosophy,
      description: philosophyDescription,
      metrics: {
        experimental: experimentalRepos.length,
        production: repos.length - experimentalRepos.length,
        enthusiasm: 'High',
        recentActivity: events.length
      }
    });

    return insights;
  };

  const generateBehavioralPatterns = (user, repos, events) => {
    const patterns = [];
   
    const accountAge = new Date().getFullYear() - new Date(user.created_at).getFullYear();
    if (accountAge >= 5) {
      patterns.push({
        icon: 'üåü',
        text: `Veteran Developer - ${accountAge} years on GitHub`,
        strength: 'Experienced',
        color: '#ffd700'
      });
    } else if (accountAge >= 2) {
      patterns.push({
        icon: 'üìà',
        text: `Established Developer - ${accountAge} years experience`,
        strength: 'Growing',
        color: '#58a6ff'
      });
    } else {
      patterns.push({
        icon: 'üå±',
        text: `Emerging Developer - ${accountAge} year${accountAge !== 1 ? 's' : ''} on platform`,
        strength: 'Fresh',
        color: '#2ea043'
      });
    }

    const recentEvents = events.filter(e => {
      const eventDate = new Date(e.created_at);
      const monthsAgo = (new Date() - eventDate) / (1000 * 60 * 60 * 24 * 30);
      return monthsAgo <= 3;
    });

    if (recentEvents.length > 20) {
      patterns.push({
        icon: 'üî•',
        text: 'Highly Consistent - Very active in recent months',
        strength: 'Excellent',
        color: '#e74c3c'
      });
    } else if (recentEvents.length > 10) {
      patterns.push({
        icon: '‚ö°',
        text: 'Consistent Contributor - Regular activity pattern',
        strength: 'Good',
        color: '#f39c12'
      });
    }

    return patterns;
  };

  const formatRelativeTime = (dateString) => {
    const now = new Date();
    const eventDate = new Date(dateString);
    const diffInMilliseconds = now - eventDate;
    const diffInMinutes = Math.floor(diffInMilliseconds / (1000 * 60));
    const diffInHours = Math.floor(diffInMilliseconds / (1000 * 60 * 60));
    const diffInDays = Math.floor(diffInMilliseconds / (1000 * 60 * 60 * 24));

    if (diffInMinutes < 60) {
      return `${diffInMinutes} minutes ago`;
    } else if (diffInHours < 24) {
      return `${diffInHours} hours ago`;
    } else if (diffInDays < 30) {
      return `${diffInDays} days ago`;
    } else {
      return new Date(dateString).toLocaleDateString();
    }
  };

  const getEventColor = (eventType) => {
    const colorMap = {
      'PushEvent': '#2ea043',
      'CreateEvent': '#58a6ff',
      'DeleteEvent': '#f85149',
      'IssuesEvent': '#fb8500',
      'PullRequestEvent': '#a855f7',
      'WatchEvent': '#ffd700',
      'ForkEvent': '#06b6d4',
      'ReleaseEvent': '#10b981',
      'PublicEvent': '#ec4899',
      'MemberEvent': '#8b5cf6'
    };
    return colorMap[eventType] || '#58a6ff';
  };

  const getDetailedActivityDescription = (event) => {
    switch (event.type) {
      case 'PushEvent':
        const commits = event.payload.commits || [];
        if (commits.length > 0) {
          return `Latest commit: "${commits[0].message.split('\n')[0]}"`;
        }
        return `Pushed ${commits.length} commits to ${event.payload.ref}`;
      case 'CreateEvent':
        return `Created ${event.payload.ref_type}${event.payload.ref ? ` "${event.payload.ref}"` : ''}`;
      case 'IssuesEvent':
        return `${event.payload.action} issue #${event.payload.issue?.number}: "${event.payload.issue?.title}"`;
      case 'PullRequestEvent':
        return `${event.payload.action} PR #${event.payload.pull_request?.number}: "${event.payload.pull_request?.title}"`;
      case 'WatchEvent':
        return 'Added this repository to their watchlist';
      case 'ForkEvent':
        return `Forked to ${event.payload.forkee?.full_name}`;
      case 'ReleaseEvent':
        return `${event.payload.action} release "${event.payload.release?.tag_name}"`;
      case 'DeleteEvent':
        return `Deleted ${event.payload.ref_type} "${event.payload.ref}"`;
      case 'PublicEvent':
        return 'Changed repository visibility to public';
      case 'MemberEvent':
        return `${event.payload.action} ${event.payload.member?.login} as collaborator`;
      default:
        return event.type.replace('Event', '');
    }
  };

  const analyzeProfile = async () => {
    if (!username.trim()) {
      setError('Please enter a GitHub username');
      return;
    }

    setLoading(true);
    setError('');
    setUserData(null);

    try {
      const userResponse = await fetch(`https://api.github.com/users/${username}`);
      if (!userResponse.ok) {
        throw new Error('User not found');
      }
      const user = await userResponse.json();

      const reposResponse = await fetch(`https://api.github.com/users/${username}/repos?per_page=100`);
      const repos = await reposResponse.json();

      const eventsResponse = await fetch(`https://api.github.com/users/${username}/events?per_page=50`);
      const events = await eventsResponse.json();

      const culturalInsights = analyzeCulturalPatterns(user, repos, events);
      const behavioralPatterns = generateBehavioralPatterns(user, repos, events);

      const analysis = {
        profile: {
          collaboration: repos.filter(r => r.forks_count > 0).length > 5 ? 'High' :
                       repos.filter(r => r.forks_count > 0).length > 2 ? 'Medium' : 'Low',
          consistency: events.length > 7 ? 'High' : events.length > 4 ? 'Medium' : 'Low',
          innovation: user.public_repos > 20 ? 'High' : user.public_repos > 10 ? 'Medium' : 'Low'
        },
        repository: {
          avgStars: Math.round(repos.reduce((sum, r) => sum + r.stargazers_count, 0) / repos.length) || 0,
          avgForks: Math.round(repos.reduce((sum, r) => sum + r.forks_count, 0) / repos.length) || 0,
          documentationRate: Math.round((repos.filter(r => r.description).length / repos.length) * 100) || 0
        },
        behavioral: {
          primaryLanguage: repos.sort((a, b) => b.stargazers_count - a.stargazers_count)[0]?.language || 'Unknown',
          projectFocus: repos.length > 15 ? 'Diverse' : repos.length > 8 ? 'Focused' : 'Specialized',
          activityPattern: events.length > 5 ? 'Active' : 'Steady'
        },
        cultural: culturalInsights,
        patterns: behavioralPatterns
      };

      setUserData({ user, repos, events, analysis });
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      analyzeProfile();
    }
  };

  return (
    <>
      <GlobalStyle />
      <StarField>{createStars()}</StarField>
      <Container>
        <HeroSection>
          <ReflectoCatLogo>
            <svg width="320" height="180" viewBox="0 0 320 180" fill="none" xmlns="http://www.w3.org/2000/svg" style={{transform: 'rotate(180deg)'}}>
              <g transform="rotate(180 160 90)">
                <ellipse cx="235" cy="90" rx="60" ry="80" fill="#e3f2fd" stroke="#90a4ae" strokeWidth="4"/>
                <g opacity="0.45">
                  <path d="M265 145 Q280 160 245 140" stroke="#1976d2" strokeWidth="6" fill="none"/>
                  <ellipse cx="235" cy="110" rx="27" ry="36" fill="#1976d2"/>
                  <ellipse cx="235" cy="74" rx="32" ry="30" fill="#2196f3"/>
                  <path d="M217,66 Q210,47 233,65" fill="#2196f3"/>
                  <path d="M253,66 Q260,47 237,65" fill="#2196f3"/>
                  <ellipse cx="227" cy="82" rx="3.5" ry="6" fill="#fff"/>
                  <ellipse cx="243" cy="82" rx="3.5" ry="6" fill="#fff"/>
                  <ellipse cx="227" cy="82" rx="1.6" ry="2.5" fill="#222"/>
                  <ellipse cx="243" cy="82" rx="1.6" ry="2.5" fill="#222"/>
                  <path d="M232 93 Q235 97 238 93" stroke="#0d47a1" strokeWidth="2" fill="none"/>
                  <path d="M218 93 Q208 94 213 97" stroke="#0d47a1" strokeWidth="1"/>
                  <path d="M252 93 Q262 94 257 97" stroke="#0d47a1" strokeWidth="1"/>
                </g>
                <path d="M115 145 Q100 160 135 140" stroke="#1976d2" strokeWidth="6" fill="none"/>
                <ellipse cx="90" cy="110" rx="27" ry="36" fill="#1976d2"/>
                <ellipse cx="90" cy="74" rx="32" ry="30" fill="#2196f3"/>
                <path d="M74,66 Q67,47 92,65" fill="#2196f3"/>
                <path d="M106,66 Q113,47 88,65" fill="#2196f3"/>
                <ellipse cx="82" cy="82" rx="3.5" ry="6" fill="#fff"/>
                <ellipse cx="98" cy="82" rx="3.5" ry="6" fill="#fff"/>
                <ellipse cx="82" cy="82" rx="1.6" ry="2.5" fill="#222"/>
                <ellipse cx="98" cy="82" rx="1.6" ry="2.5" fill="#222"/>
                <path d="M87 93 Q90 97 93 93" stroke="#0d47a1" strokeWidth="2" fill="none"/>
                <path d="M75 93 Q65 94 70 97" stroke="#0d47a1" strokeWidth="1"/>
                <path d="M105 93 Q115 94 110 97" stroke="#0d47a1" strokeWidth="1"/>
              </g>
            </svg>
          </ReflectoCatLogo>
          <HeroTitle>ReflectoCat</HeroTitle>
          <HeroSubtitle>ü™û A playful mirror for your GitHub voice. ü™û</HeroSubtitle>
        </HeroSection>

        <Header>
          <SearchContainer>
            <Input
              type="text"
              placeholder="Enter GitHub username..."
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              onKeyPress={handleKeyPress}
            />
            <Button onClick={analyzeProfile} disabled={loading}>
              {loading ? 'Analyzing...' : 'Analyze Profile'}
            </Button>
          </SearchContainer>
        </Header>

        {error && <ErrorContainer>{error}</ErrorContainer>}

        {loading && (
          <LoadingContainer>
            Analyzing your GitHub personality... üîç
          </LoadingContainer>
        )}

        {userData && (
          <>
            <ProfileHeader>
              <ProfileAvatar
                src={userData.user.avatar_url}
                alt={`${userData.user.name || userData.user.login}'s avatar`}
              />
              <ProfileName>
                {userData.user.name || userData.user.login}
              </ProfileName>
              <ProfileUsername>@{userData.user.login}</ProfileUsername>
              {userData.user.bio && (
                <ProfileBio>{userData.user.bio}</ProfileBio>
              )}
              <ProfileStats>
                <ProfileStatItem>
                  <ProfileStatValue>{userData.user.public_repos}</ProfileStatValue>
                  <ProfileStatLabel>repos</ProfileStatLabel>
                </ProfileStatItem>
                <ProfileStatItem>
                  <ProfileStatValue>{userData.user.followers}</ProfileStatValue>
                  <ProfileStatLabel>followers</ProfileStatLabel>
                </ProfileStatItem>
                <ProfileStatItem>
                  <ProfileStatValue>{userData.user.following}</ProfileStatValue>
                  <ProfileStatLabel>following</ProfileStatLabel>
                </ProfileStatItem>
                <ProfileStatItem>
                  <ProfileStatValue>
                    {userData.repos.reduce((sum, r) => sum + r.stargazers_count, 0)}
                  </ProfileStatValue>
                  <ProfileStatLabel>stars</ProfileStatLabel>
                </ProfileStatItem>
              </ProfileStats>
            </ProfileHeader>

            <Dashboard>
              <SideContent>
                <LiveUserStats>
                  <LiveStatsTitle>üìä Live Stats</LiveStatsTitle>
                  <LiveStatsItem>
                    <StatLabel>Public Repos</StatLabel>
                    <StatValue>{userData.user.public_repos}</StatValue>
                  </LiveStatsItem>
                  <LiveStatsItem>
                    <StatLabel>Followers</StatLabel>
                    <StatValue>{userData.user.followers}</StatValue>
                  </LiveStatsItem>
                  <LiveStatsItem>
                    <StatLabel>Following</StatLabel>
                    <StatValue>{userData.user.following}</StatValue>
                  </LiveStatsItem>
                  <LiveStatsItem>
                    <StatLabel>Total Stars</StatLabel>
                    <StatValue>{userData.repos.reduce((sum, r) => sum + r.stargazers_count, 0)}</StatValue>
                  </LiveStatsItem>
                  <LiveStatsItem>
                    <StatLabel>Total Forks</StatLabel>
                    <StatValue>{userData.repos.reduce((sum, r) => sum + r.forks_count, 0)}</StatValue>
                  </LiveStatsItem>
                  <LiveStatsItem>
                    <StatLabel>Languages Used</StatLabel>
                    <StatValue>{[...new Set(userData.repos.map(r => r.language).filter(Boolean))].length}</StatValue>
                  </LiveStatsItem>
                </LiveUserStats>

                {userData.events.length > 0 && (
                  <LastActivitySection>
                    <LastActivityTitle>‚ö° Last Activity</LastActivityTitle>
                    <LastActivityItem eventColor={getEventColor(userData.events[0].type)}>
                      <ActivityHeader>
                        <ActivityType>{userData.events[0].type.replace('Event', '')}</ActivityType>
                        <ActivityRepo>{userData.events[0].repo?.name}</ActivityRepo>
                        <ActivityTime>{formatRelativeTime(userData.events[0].created_at)}</ActivityTime>
                      </ActivityHeader>
                      <ActivityDetails>
                        {getDetailedActivityDescription(userData.events[0])}
                      </ActivityDetails>
                    </LastActivityItem>
                  </LastActivitySection>
                )}
              </SideContent>

              <MainContent>
                <SectionContainer>
                  <SectionTitle>üó£Ô∏è Cultural & Behavioral Insights</SectionTitle>
                  <CulturalInsightsContainer>
                    <InsightsGrid>
                      {userData.analysis.cultural.map((insight, index) => (
                        <InsightCard key={index} color={insight.color}>
                          <InsightTitle>
                            <InsightIcon>{insight.icon}</InsightIcon>
                            {insight.title}
                          </InsightTitle>
                          <InsightContent>
                            <strong>{insight.pattern}:</strong> {insight.description}
                          </InsightContent>
                          <InsightMetrics>
                            {Object.entries(insight.metrics).map(([key, value]) => (
                              <InsightMetric key={key}>
                                <MetricLabel>{key.replace(/([A-Z])/g, ' $1').toLowerCase()}</MetricLabel>
                                <MetricData color={insight.color}>{value}</MetricData>
                              </InsightMetric>
                            ))}
                          </InsightMetrics>
                        </InsightCard>
                      ))}
                    </InsightsGrid>
                   
                    <BehaviorPatternList>
                      <InsightTitle style={{ marginTop: '2rem', marginBottom: '1rem' }}>
                        <InsightIcon>üß¨</InsightIcon>
                        Behavioral Patterns
                      </InsightTitle>
                      {userData.analysis.patterns.map((pattern, index) => (
                        <BehaviorPattern key={index}>
                          <PatternIcon>{pattern.icon}</PatternIcon>
                          <PatternText>{pattern.text}</PatternText>
                          <PatternStrength>{pattern.strength}</PatternStrength>
                        </BehaviorPattern>
                      ))}
                    </BehaviorPatternList>
                  </CulturalInsightsContainer>
                </SectionContainer>

                <SectionContainer>
                  <SectionTitle>üë§ Profile & Repository Analysis</SectionTitle>
                  <AnalysisGrid>
                    <MetricCard color="#2ea043">
                      <MetricTitle>ü§ù Collaboration</MetricTitle>
                      <MetricValue color={getPersonalityColor(userData.analysis.profile.collaboration)}>
                        {userData.analysis.profile.collaboration}
                      </MetricValue>
                      <MetricDescription>Issue interactions & PR activity</MetricDescription>
                    </MetricCard>

                    <MetricCard color="#1f6feb">
                      <MetricTitle>‚ö° Consistency</MetricTitle>
                      <MetricValue color={getPersonalityColor(userData.analysis.profile.consistency)}>
                        {userData.analysis.profile.consistency}
                      </MetricValue>
                      <MetricDescription>Regular contribution patterns</MetricDescription>
                    </MetricCard>

                    <MetricCard color="#fb8500">
                      <MetricTitle>üöÄ Innovation</MetricTitle>
                      <MetricValue color={getPersonalityColor(userData.analysis.profile.innovation)}>
                        {userData.analysis.profile.innovation}
                      </MetricValue>
                      <MetricDescription>Public repositories created</MetricDescription>
                    </MetricCard>

                    <MetricCard color="#2ea043">
                      <MetricTitle>‚≠ê Avg Stars</MetricTitle>
                      <MetricValue>{userData.analysis.repository.avgStars}</MetricValue>
                      <MetricDescription>Community appreciation</MetricDescription>
                    </MetricCard>

                    <MetricCard color="#58a6ff">
                      <MetricTitle>üç¥ Avg Forks</MetricTitle>
                      <MetricValue>{userData.analysis.repository.avgForks}</MetricValue>
                      <MetricDescription>Code sharing frequency</MetricDescription>
                    </MetricCard>

                    <MetricCard color="#f1e05a">
                      <MetricTitle>üìÑ Documentation Rate</MetricTitle>
                      <MetricValue>{userData.analysis.repository.documentationRate}%</MetricValue>
                      <MetricDescription>Clarity of project descriptions</MetricDescription>
                    </MetricCard>

                    <MetricCard color="#f1e05a">
                      <MetricTitle>üíª Primary Language</MetricTitle>
                      <MetricValue>{userData.analysis.behavioral.primaryLanguage}</MetricValue>
                      <MetricDescription>Most frequently used</MetricDescription>
                    </MetricCard>

                    <MetricCard color="#06b6d4">
                      <MetricTitle>üéØ Project Focus</MetricTitle>
                      <MetricValue color={getPersonalityColor(userData.analysis.behavioral.projectFocus)}>
                        {userData.analysis.behavioral.projectFocus}
                      </MetricValue>
                      <MetricDescription>Variety of project types</MetricDescription>
                    </MetricCard>

                    <MetricCard color="#e67e22">
                      <MetricTitle>üìà Activity Pattern</MetricTitle>
                      <MetricValue>{userData.analysis.behavioral.activityPattern}</MetricValue>
                      <MetricDescription>Recent GitHub activity level</MetricDescription>
                    </MetricCard>
                  </AnalysisGrid>
                </SectionContainer>
              </MainContent>
            </Dashboard>
          </>
        )}
      </Container>
    </>
  );
};

export default App;