import React, { useState } from 'react';
import styled, { keyframes, createGlobalStyle } from 'styled-components';const GlobalStyle = createGlobalStyle`  @import url('https://fonts.googleapis.com/css2?family=Dancing+Script:wght@400;500;600;700&display=swap');    * {    margin: 0;    padding: 0;    box-sizing: border-box;  }  body {    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Noto Sans', Helvetica, Arial, sans-serif;    line-height: 1.6;    color: #e6edf3;    background: linear-gradient(135deg, #0d1117 0%, #161b22 50%, #21262d 100%);    min-height: 100vh;    overflow-x: hidden;  }  html, body, #root {    height: 100%;  }`;const twinkle = keyframes`  0% { opacity: 0; transform: scale(0.5); }  50% { opacity: 1; transform: scale(1); }  100% { opacity: 0; transform: scale(0.5); }`;const StarField = styled.div`  position: fixed;  top: 0;  left: 0;  width: 100%;  height: 100%;  pointer-events: none;  z-index: 1;`;const Star = styled.div`  position: absolute;  width: 2px;  height: 2px;  background: #58a6ff;  border-radius: 50%;  animation: ${twinkle} ${props => props.duration}s infinite;  animation-delay: ${props => props.delay}s;  left: ${props => props.left}%;  top: ${props => props.top}%;  box-shadow: 0 0 6px #58a6ff;`;const Container = styled.div`  min-height: 100vh;  padding: 2rem;  position: relative;  z-index: 2;`;const HeroSection = styled.section`  width: 100%;  max-width: 1400px;  margin: 0 auto;  background: rgba(33, 38, 45, 0.6);  backdrop-filter: blur(10px);  border: 1px solid #30363d;  border-radius: 8px;  padding: 1.5rem;  text-align: center;  margin-bottom: 2rem;  box-shadow: 0 4px 20px rgba(0,0,0,0.3);`;const HeroTitle = styled.h1`  font-family: 'Dancing Script', cursive;  font-size: 3.2rem;  font-weight: 700;  color: #58a6ff;  margin-bottom: 0.6rem;  text-shadow: 0 0 20px rgba(88, 166, 255, 0.5);  letter-spacing: 0.1em;    @media (max-width: 768px) {    font-size: 2.5rem;  }`;const HeroSubtitle = styled.p`  font-family: 'Dancing Script', cursive;  font-size: 1.4rem;  font-weight: bold;  color: #ffffff;  text-shadow: 0 2px 4px rgba(0,0,0,0.5);  letter-spacing: 0.05em;    @media (max-width: 768px) {    font-size: 1.2rem;  }`;const ReflectoCatLogo = styled.div`  width: 160px;  height: 96px;  margin: 0 auto 1rem;  animation: float 3s ease-in-out infinite;  display: flex;  align-items: center;  justify-content: center;    svg {    width: 100%;    height: 100%;  }    @keyframes float {    0%, 100% { transform: translateY(0px); }    50% { transform: translateY(-8px); }  }`;const Header = styled.header`  text-align: center;  margin-bottom: 3rem;  animation: fadeInDown 1s ease-out;  display: flex;  flex-direction: column;  align-items: center;  max-width: 1400px;  margin-left: auto;  margin-right: auto;`;const SearchContainer = styled.div`  display: flex;  gap: 1rem;  margin-bottom: 2rem;  max-width: 500px;  width: 100%;    @media (max-width: 768px) {    flex-direction: column;    gap: 1rem;  }`;const Input = styled.input`  flex: 1;  padding: 1rem 1.5rem;  border: 2px solid #30363d;  border-radius: 8px;  font-size: 1.1rem;  background: #21262d;  color: #e6edf3;  box-shadow: 0 4px 15px rgba(0,0,0,0.3);  transition: all 0.3s ease;    &:focus {    outline: none;    border-color: #58a6ff;    box-shadow: 0 0 0 3px rgba(88, 166, 255, 0.1);    transform: translateY(-2px);  }    &::placeholder {    color: #7d8590;  }`;const Button = styled.button`  padding: 1rem 2rem;  background: linear-gradient(45deg, #238636, #2ea043);  color: white;  border: none;  border-radius: 8px;  font-size: 1.1rem;  font-weight: 600;  cursor: pointer;  transition: all 0.3s ease;  box-shadow: 0 4px 15px rgba(0,0,0,0.3);    &:hover {    background: linear-gradient(45deg, #2ea043, #238636);    transform: translateY(-2px);    box-shadow: 0 6px 20px rgba(0,0,0,0.4);  }    &:disabled {    opacity: 0.7;    cursor: not-allowed;    transform: none;  }    @media (max-width: 768px) {    width: 100%;  }`;const SectionContainer = styled.div`  margin-bottom: 2rem;`;const SectionTitle = styled.h3`  font-size: 1.2rem;  color: #e6edf3;  margin-bottom: 0.8rem;  display: flex;  align-items: center;  gap: 0.5rem;  border-bottom: 1px solid #30363d;  padding-bottom: 0.3rem;`;const AnalysisGrid = styled.div`  display: grid;  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));  gap: 1rem;`;const MetricCard = styled.div`  background: linear-gradient(135deg, #161b22 0%, #0d1117 100%);  padding: 1rem;  border-radius: 6px;  border: 1px solid #30363d;  border-left: 3px solid ${props => props.color || '#58a6ff'};  transition: transform 0.2s ease, box-shadow 0.2s ease;    &:hover {    transform: translateY(-2px);    box-shadow: 0 4px 15px rgba(0,0,0,0.3);    border-left-color: ${props => props.color || '#58a6ff'};  }`;const MetricTitle = styled.h3`  font-size: 0.85rem;  color: #e6edf3;  margin-bottom: 0.3rem;  display: flex;  align-items: center;  gap: 0.3rem;  font-weight: 600;`;const MetricValue = styled.div`  font-size: 1rem;  font-weight: 700;  color: ${props => props.color || '#58a6ff'};  margin-bottom: 0.3rem;`;const MetricDescription = styled.p`  color: #7d8590;  font-size: 0.75rem;  line-height: 1.3;`;const SentimentBar = styled.div`  width: 100%;  height: 8px;  background: #21262d;  border-radius: 4px;  margin: 0.5rem 0;  overflow: hidden;`;const SentimentFill = styled.div`  height: 100%;  background: ${props => {    if (props.sentiment > 0.3) return 'linear-gradient(90deg, #2ea043, #39d353)';    if (props.sentiment < -0.3) return 'linear-gradient(90deg, #f85149, #ff7b72)';    return 'linear-gradient(90deg, #fb8500, #ffa726)';  }};  width: ${props => Math.abs(props.sentiment) * 100}%;  transition: width 0.8s ease;  border-radius: 4px;`;const ActivityItem = styled.div`  background: #0d1117;  border: 1px solid #30363d;  border-radius: 6px;  padding: 0.8rem;  margin-bottom: 0.8rem;  transition: all 0.2s ease;    &:hover {    border-color: #58a6ff;    transform: translateY(-1px);  }`;const ActivityType = styled.span`  background: #58a6ff;  color: #0d1117;  padding: 0.2rem 0.4rem;  border-radius: 3px;  font-size: 0.7rem;  font-weight: 600;  margin-right: 0.5rem;`;const ActivityRepo = styled.span`  color: #58a6ff;  font-weight: 600;  font-size: 0.85rem;`;const ActivityDescription = styled.p`  color: #7d8590;  margin-top: 0.4rem;  font-size: 0.8rem;`;const Dashboard = styled.div`  background: rgba(33, 38, 45, 0.95);  backdrop-filter: blur(10px);  border: 1px solid #30363d;  border-radius: 12px;  padding: 2rem;  box-shadow: 0 8px 32px rgba(0,0,0,0.4);  max-width: 1400px;  width: 100%;  margin: 0 auto;  animation: fadeInUp 0.8s ease-out;  display: flex;  gap: 1.5rem;    @media (max-width: 768px) {    flex-direction: column;    padding: 1.5rem;    margin: 1rem;    gap: 1rem;  }`;const SideContent = styled.div`  width: 220px;    @media (max-width: 768px) {    width: 100%;  }`;const LiveUserStats = styled.div`  background: rgba(13, 17, 23, 0.8);  border: 1px solid #30363d;  border-radius: 6px;  padding: 1rem;  box-shadow: 0 4px 20px rgba(0,0,0,0.3);  position: sticky;  top: 2rem;`;const LiveStatsTitle = styled.h4`  font-size: 0.9rem;  color: #58a6ff;  margin-bottom: 0.8rem;  display: flex;  align-items: center;  gap: 0.4rem;  font-weight: 600;`;const LiveStatsItem = styled.div`  font-size: 0.8rem;  color: #e6edf3;  margin-bottom: 0.6rem;  display: flex;  align-items: center;  justify-content: space-between;  padding: 0.4rem 0;  border-bottom: 1px solid rgba(48, 54, 61, 0.5);    &:last-child {    border-bottom: none;    margin-bottom: 0;  }`;const StatLabel = styled.span`  color: #7d8590;  font-size: 0.75rem;`;const StatValue = styled.span`  font-weight: 600;  color: #58a6ff;  font-size: 0.8rem;`;const MainContent = styled.div`  flex: 1;`;const LoadingContainer = styled.div`  display: flex;  align-items: center;  justify-content: center;  min-height: 300px;  font-size: 1.2rem;  color: #58a6ff;  max-width: 1400px;  margin: 0 auto;`;const ErrorContainer = styled.div`  background: rgba(248, 81, 73, 0.1);  border: 1px solid #f85149;  border-radius: 8px;  padding: 1.5rem;  margin: 1rem auto;  color: #f85149;  text-align: center;  max-width: 1400px;`;const App = () => {  const [username, setUsername] = useState('');  const [userData, setUserData] = useState(null);  const [loading, setLoading] = useState(false);  const [error, setError] = useState('');  const createStars = () => {    const stars = [];    for (let i = 0; i < 50; i++) {      stars.push(        <Star          key={i}          left={Math.random() * 100}          top={Math.random() * 100}          duration={2 + Math.random() * 3}          delay={Math.random() * 2}        />      );    }    return stars;  };  const getPersonalityColor = (level) => {    if (level === 'High') return '#2ea043';    if (level === 'Medium') return '#fb8500';    return '#f85149';  };  const getSentimentColor = (score) => {    if (score > 0.3) return '#2ea043';    if (score < -0.3) return '#f85149';    return '#fb8500';  };  const formatDate = (dateString) => {    return new Date(dateString).toLocaleDateString();  };  const getActivityDescription = (event) => {    switch (event.type) {      case 'PushEvent':        return `Pushed ${event.payload.commits?.length || 0} commits`;      case 'CreateEvent':        return `Created ${event.payload.ref_type}`;      case 'IssuesEvent':        return `${event.payload.action} issue`;      case 'PullRequestEvent':        return `${event.payload.action} pull request`;      default:        return event.type.replace('Event', '');    }  };  const analyzeSentiment = (user, repos, events) => {    // Analyze repository descriptions and user bio for sentiment    const descriptions = repos.map(r => r.description || '').join(' ').toLowerCase();    const bio = (user.bio || '').toLowerCase();    const allText = descriptions + ' ' + bio;    // Positive sentiment words    const positiveWords = [      'love', 'awesome', 'amazing', 'great', 'excellent', 'fantastic', 'wonderful',      'helpful', 'useful', 'innovative', 'creative', 'inspiring', 'excited',      'happy', 'enjoy', 'fun', 'cool', 'nice', 'good', 'perfect', 'beautiful',      'brilliant', 'outstanding', 'superb', 'marvelous', 'terrific', 'fabulous'    ];    // Negative sentiment words    const negativeWords = [      'hate', 'terrible', 'awful', 'bad', 'horrible', 'disgusting', 'annoying',      'frustrating', 'difficult', 'problem', 'issue', 'bug', 'error', 'broken',      'stupid', 'dumb', 'useless', 'waste', 'boring', 'ugly', 'worst', 'sucks'    ];    // Neutral/Professional words    const neutralWords = [      'implementation', 'documentation', 'feature', 'update', 'version', 'release',      'project', 'application', 'system', 'tool', 'library', 'framework',      'api', 'database', 'server', 'client', 'web', 'mobile', 'desktop'    ];    // Count sentiment words    const positiveCount = positiveWords.filter(word => allText.includes(word)).length;    const negativeCount = negativeWords.filter(word => allText.includes(word)).length;    const neutralCount = neutralWords.filter(word => allText.includes(word)).length;    const totalWords = allText.split(' ').length;    // Calculate sentiment score (-1 to +1)    const totalSentimentWords = positiveCount + negativeCount + neutralCount;    let sentimentScore = 0;        if (totalSentimentWords > 0) {      sentimentScore = (positiveCount - negativeCount) / Math.max(totalSentimentWords, 10);    }    // Determine sentiment category and emoji    let sentimentCategory = 'Neutral';    let sentimentEmoji = '😐';    let sentimentDescription = 'Balanced emotional tone';    if (sentimentScore > 0.3) {      sentimentCategory = 'Positive';      sentimentEmoji = '😊';      sentimentDescription = 'Optimistic and encouraging tone';    } else if (sentimentScore > 0.1) {      sentimentCategory = 'Slightly Positive';      sentimentEmoji = '🙂';      sentimentDescription = 'Generally positive outlook';    } else if (sentimentScore < -0.3) {      sentimentCategory = 'Critical';      sentimentEmoji = '😤';      sentimentDescription = 'Direct and critical approach';    } else if (sentimentScore < -0.1) {      sentimentCategory = 'Slightly Critical';      sentimentEmoji = '😕';      sentimentDescription = 'Moderately critical tone';    }    // Analyze communication pattern based on events    const communicationPattern = events.length > 5 ? 'Active Communicator' :                                 events.length > 2 ? 'Moderate Communicator' : 'Reserved Communicator';    // Professional vs Casual tone    const professionalWords = ['enterprise', 'solution', 'architecture', 'implementation'];    const casualWords = ['fun', 'cool', 'awesome', 'simple'];        const professionalCount = professionalWords.filter(word => allText.includes(word)).length;    const casualCount = casualWords.filter(word => allText.includes(word)).length;        const communicationTone = professionalCount > casualCount ? 'Professional' :                              casualCount > professionalCount ? 'Casual' : 'Balanced';    return {      score: sentimentScore,      category: sentimentCategory,      emoji: sentimentEmoji,      description: sentimentDescription,      positiveCount,      negativeCount,      neutralCount,      communicationPattern,      communicationTone,      confidence: Math.min((totalSentimentWords / Math.max(totalWords / 10, 1)) * 100, 100)    };  };  const analyzeCulturalContext = (user, repos) => {    const locationHints = {      Japan: ['jp', 'japan', 'tokyo', 'kyoto', 'osaka'],      India: ['in', 'india', 'bangalore', 'mumbai', 'delhi', 'chennai', 'hyderabad'],      USA: ['us', 'usa', 'america', 'california', 'new york', 'texas', 'seattle'],      Germany: ['de', 'germany', 'berlin', 'munich', 'hamburg'],      UK: ['uk', 'london', 'england', 'britain', 'manchester'],      Canada: ['ca', 'canada', 'toronto', 'vancouver', 'montreal'],      China: ['cn', 'china', 'beijing', 'shanghai', 'shenzhen'],      Brazil: ['br', 'brazil', 'sao paulo', 'rio'],      France: ['fr', 'france', 'paris', 'lyon'],      Netherlands: ['nl', 'netherlands', 'amsterdam'],      Australia: ['au', 'australia', 'sydney', 'melbourne']    };    const location = (user.location || '').toLowerCase();    let detectedRegion = 'Global';    let regionalEmoji = '🌍';    for (const [region, hints] of Object.entries(locationHints)) {      if (hints.some(hint => location.includes(hint))) {        detectedRegion = region;        const emojiMap = {          Japan: '🇯🇵', India: '🇮🇳', USA: '🇺🇸', Germany: '🇩🇪',          UK: '🇬🇧', Canada: '🇨🇦', China: '🇨🇳', Brazil: '🇧🇷',          France: '🇫🇷', Netherlands: '🇳🇱', Australia: '🇦🇺'        };        regionalEmoji = emojiMap[region] || '🌍';        break;      }    }    const communicationStyles = {      Japan: 'Respectful & Detail-oriented',      India: 'Collaborative & Solution-focused',      USA: 'Direct & Innovation-driven',      Germany: 'Precise & Engineering-focused',      UK: 'Diplomatic & Professional',      Canada: 'Friendly & Inclusive',      China: 'Efficient & Goal-oriented',      Brazil: 'Expressive & Community-minded',      France: 'Elegant & Thoughtful',      Netherlands: 'Straightforward & Practical',      Australia: 'Casual & Friendly',      Global: 'Multicultural & Adaptive'    };    const workStyles = {      Japan: 'Meticulous & Long-term focused',      India: 'Agile & Scalable solutions',      USA: 'Fast-paced & Disruptive',      Germany: 'Systematic & Quality-focused',      UK: 'Balanced & Standards-driven',      Canada: 'Collaborative & Sustainable',      China: 'Rapid & Scale-oriented',      Brazil: 'Creative & Relationship-based',      France: 'Methodical & Artistic',      Netherlands: 'Pragmatic & Efficient',      Australia: 'Relaxed & Results-oriented',      Global: 'Flexible & Cross-cultural'    };    return {      region: detectedRegion,      regionalEmoji,      communicationStyle: communicationStyles[detectedRegion],      workStyle: workStyles[detectedRegion]    };  };  const analyzeCommunicationTone = (user, repos) => {    const descriptions = repos.map(r => r.description || '').join(' ').toLowerCase();    const bio = (user.bio || '').toLowerCase();    const allText = descriptions + ' ' + bio;    // Formality analysis    const formalWords = ['enterprise', 'professional', 'solution', 'framework', 'system', 'architecture'];    const casualWords = ['fun', 'cool', 'awesome', 'simple', 'easy', 'quick'];        const formalCount = formalWords.filter(word => allText.includes(word)).length;    const casualCount = casualWords.filter(word => allText.includes(word)).length;        let formality = 'Balanced';    let toneEmoji = '⚖️';        if (formalCount > casualCount + 1) {      formality = 'Professional';      toneEmoji = '🎩';    } else if (casualCount > formalCount + 1) {      formality = 'Casual';      toneEmoji = '😊';    }    // Enthusiasm analysis    const enthusiasticWords = ['!', 'amazing', 'incredible', 'love', 'excited', 'awesome'];    const enthusiasmCount = enthusiasticWords.filter(word => allText.includes(word)).length;        let enthusiasm = 'Moderate';    if (enthusiasmCount >= 3) enthusiasm = 'High';    else if (enthusiasmCount <= 1) enthusiasm = 'Reserved';    return {      formality,      toneEmoji,      enthusiasm,      technicality: repos.length > 10 ? 'High' : repos.length > 5 ? 'Medium' : 'Beginner'    };  };  const analyzeLanguagePatterns = (user, repos) => {    const descriptions = repos.map(r => r.description || '').join(' ');    const bio = user.bio || '';    const allText = descriptions + ' ' + bio;    // Verbosity analysis    const avgWordsPerRepo = allText.split(' ').length / Math.max(repos.length, 1);    let verbosity = 'Concise';    let styleEmoji = '✂️';        if (avgWordsPerRepo > 10) {      verbosity = 'Detailed';      styleEmoji = '📚';    } else if (avgWordsPerRepo > 5) {      verbosity = 'Balanced';      styleEmoji = '⚖️';    }    // Creativity analysis    const creativeWords = ['creative', 'innovative', 'unique', 'experimental', 'art', 'design'];    const creativityScore = creativeWords.filter(word => allText.toLowerCase().includes(word)).length;    return {      verbosity,      styleEmoji,      creativity: creativityScore > 2 ? 'High' : creativityScore > 0 ? 'Medium' : 'Technical',      humor: allText.includes('😄') || allText.includes('😂') || allText.includes('joke') ? 'Present' : 'Minimal'    };  };  const analyzeProfile = async () => {    if (!username.trim()) {      setError('Please enter a GitHub username');      return;    }    setLoading(true);    setError('');    setUserData(null);    try {      // Fetch user data      const userResponse = await fetch(`https://api.github.com/users/${username}`);      if (!userResponse.ok) {        throw new Error('User not found');      }      const user = await userResponse.json();      // Fetch repositories      const reposResponse = await fetch(`https://api.github.com/users/${username}/repos?per_page=100`);      const repos = await reposResponse.json();      // Fetch recent events      const eventsResponse = await fetch(`https://api.github.com/users/${username}/events?per_page=10`);      const events = await eventsResponse.json();      // Analysis      const analysis = {        profile: {          collaboration: repos.filter(r => r.forks_count > 0).length > 5 ? 'High' :                        repos.filter(r => r.forks_count > 0).length > 2 ? 'Medium' : 'Low',          consistency: events.length > 7 ? 'High' : events.length > 4 ? 'Medium' : 'Low',          innovation: user.public_repos > 20 ? 'High' : user.public_repos > 10 ? 'Medium' : 'Low'        },        repository: {          avgStars: Math.round(repos.reduce((sum, r) => sum + r.stargazers_count, 0) / repos.length) || 0,          avgForks: Math.round(repos.reduce((sum, r) => sum + r.forks_count, 0) / repos.length) || 0,          documentationRate: Math.round((repos.filter(r => r.description).length / repos.length) * 100) || 0        },        communication: {          issueEngagement: Math.random() > 0.5 ? 'High' : Math.random() > 0.3 ? 'Medium' : 'Low',          prActivity: events.filter(e => e.type === 'PullRequestEvent').length > 2 ? 'High' :                      events.filter(e => e.type === 'PullRequestEvent').length > 0 ? 'Medium' : 'Low'        },        behavioral: {          primaryLanguage: repos.sort((a, b) => b.stargazers_count - a.stargazers_count)[0]?.language || 'Unknown',          projectFocus: repos.length > 15 ? 'Diverse' : repos.length > 8 ? 'Focused' : 'Specialized',          activityPattern: events.length > 5 ? 'Active' : 'Steady'        },        cultural: analyzeCulturalContext(user, repos),        tone: analyzeCommunicationTone(user, repos),        language: analyzeLanguagePatterns(user, repos),        sentiment: analyzeSentiment(user, repos, events),        insights: {          learningStyle: repos.filter(r => r.name.includes('tutorial') || r.name.includes('learning')).length > 2 ? 'Explorative' : 'Practical'        }      };      setUserData({ user, repos, events, analysis });    } catch (err) {      setError(err.message);    } finally {      setLoading(false);    }  };  const handleKeyPress = (e) => {    if (e.key === 'Enter') {      analyzeProfile();    }  };  return (    <>      <GlobalStyle />      <StarField>{createStars()}</StarField>      <Container>        <HeroSection>          <ReflectoCatLogo>            <svg width="320" height="180" viewBox="0 0 320 180" fill="none" xmlns="http://www.w3.org/2000/svg" style={{transform: 'rotate(180deg)'}}>              <g transform="rotate(180 160 90)">                {/* Mirror */}                <ellipse cx="235" cy="90" rx="60" ry="80" fill="#e3f2fd" stroke="#90a4ae" strokeWidth="4"/>                {/* Octocat reflection (faded, mirrored) */}                <g opacity="0.45">                  {/* Tail */}                  <path d="M265 145 Q280 160 245 140" stroke="#1976d2" strokeWidth="6" fill="none"/>                  {/* Body */}                  <ellipse cx="235" cy="110" rx="27" ry="36" fill="#1976d2"/>                  {/* Head (bigger) */}                  <ellipse cx="235" cy="74" rx="32" ry="30" fill="#2196f3"/>                  {/* Left Ear */}                  <path d="M217,66 Q210,47 233,65" fill="#2196f3"/>                  {/* Right Ear */}                  <path d="M253,66 Q260,47 237,65" fill="#2196f3"/>                  {/* Eyes */}                  <ellipse cx="227" cy="82" rx="3.5" ry="6" fill="#fff"/>                  <ellipse cx="243" cy="82" rx="3.5" ry="6" fill="#fff"/>                  <ellipse cx="227" cy="82" rx="1.6" ry="2.5" fill="#222"/>                  <ellipse cx="243" cy="82" rx="1.6" ry="2.5" fill="#222"/>                  {/* Mouth */}                  <path d="M232 93 Q235 97 238 93" stroke="#0d47a1" strokeWidth="2" fill="none"/>                  {/* Whiskers */}                  <path d="M218 93 Q208 94 213 97" stroke="#0d47a1" strokeWidth="1"/>                  <path d="M252 93 Q262 94 257 97" stroke="#0d47a1" strokeWidth="1"/>                </g>                {/* Octocat (front) */}                {/* Tail */}                <path d="M115 145 Q100 160 135 140" stroke="#1976d2" strokeWidth="6" fill="none"/>                {/* Body */}                <ellipse cx="90" cy="110" rx="27" ry="36" fill="#1976d2"/>                {/* Head (bigger) */}                <ellipse cx="90" cy="74" rx="32" ry="30" fill="#2196f3"/>                {/* Left Ear */}                <path d="M74,66 Q67,47 92,65" fill="#2196f3"/>                {/* Right Ear */}                <path d="M106,66 Q113,47 88,65" fill="#2196f3"/>                {/* Eyes */}                <ellipse cx="82" cy="82" rx="3.5" ry="6" fill="#fff"/>                <ellipse cx="98" cy="82" rx="3.5" ry="6" fill="#fff"/>                <ellipse cx="82" cy="82" rx="1.6" ry="2.5" fill="#222"/>                <ellipse cx="98" cy="82" rx="1.6" ry="2.5" fill="#222"/>                {/* Mouth */}                <path d="M87 93 Q90 97 93 93" stroke="#0d47a1" strokeWidth="2" fill="none"/>                {/* Whiskers */}                <path d="M75 93 Q65 94 70 97" stroke="#0d47a1" strokeWidth="1"/>                <path d="M105 93 Q115 94 110 97" stroke="#0d47a1" strokeWidth="1"/>              </g>            </svg>          </ReflectoCatLogo>          <HeroTitle>ReflectoCat</HeroTitle>          <HeroSubtitle>🪞 A playful mirror for your GitHub voice. 🪞</HeroSubtitle>        </HeroSection>        <Header>          <SearchContainer>            <Input              type="text"              placeholder="Enter GitHub username..."              value={username}              onChange={(e) => setUsername(e.target.value)}              onKeyPress={handleKeyPress}            />            <Button onClick={analyzeProfile} disabled={loading}>              {loading ? 'Analyzing...' : 'Analyze Profile'}            </Button>          </SearchContainer>        </Header>        {error && <ErrorContainer>{error}</ErrorContainer>}        {loading && (          <LoadingContainer>            Analyzing your GitHub personality... 🔍          </LoadingContainer>        )}        {userData && (          <Dashboard>            <SideContent>              <LiveUserStats>                <LiveStatsTitle>📊 Live Stats</LiveStatsTitle>                <LiveStatsItem>                  <StatLabel>Public Repos</StatLabel>                  <StatValue>{userData.user.public_repos}</StatValue>                </LiveStatsItem>                <LiveStatsItem>                  <StatLabel>Followers</StatLabel>                  <StatValue>{userData.user.followers}</StatValue>                </LiveStatsItem>                <LiveStatsItem>                  <StatLabel>Following</StatLabel>                  <StatValue>{userData.user.following}</StatValue>                </LiveStatsItem>                <LiveStatsItem>                  <StatLabel>Total Stars</StatLabel>                  <StatValue>{userData.repos.reduce((sum, r) => sum + r.stargazers_count, 0)}</StatValue>                </LiveStatsItem>                <LiveStatsItem>                  <StatLabel>Total Forks</StatLabel>                  <StatValue>{userData.repos.reduce((sum, r) => sum + r.forks_count, 0)}</StatValue>                </LiveStatsItem>                <LiveStatsItem>                  <StatLabel>Languages Used</StatLabel>                  <StatValue>{[...new Set(userData.repos.map(r => r.language).filter(Boolean))].length}</StatValue>                </LiveStatsItem>                <LiveStatsItem>                  <StatLabel>Account Age</StatLabel>                  <StatValue>{Math.floor((Date.now() - new Date(userData.user.created_at)) / (365.25 * 24 * 60 * 60 * 1000))} years</StatValue>                </LiveStatsItem>                <LiveStatsItem>                  <StatLabel>📍 Location</StatLabel>                  <StatValue>{userData.user.location || 'Not specified'}</StatValue>                </LiveStatsItem>              </LiveUserStats>            </SideContent>            <MainContent>              <SectionContainer>                <SectionTitle>👤 Profile & Repository Analysis</SectionTitle>                <AnalysisGrid>                  <MetricCard color="#2ea043">                    <MetricTitle>🤝 Collaboration</MetricTitle>                    <MetricValue color={getPersonalityColor(userData.analysis.profile.collaboration)}>                      {userData.analysis.profile.collaboration}                    </MetricValue>                    <MetricDescription>Issue interactions & PR activity</MetricDescription>                  </MetricCard>                  <MetricCard color="#1f6feb">                    <MetricTitle>⚡ Consistency</MetricTitle>                    <MetricValue color={getPersonalityColor(userData.analysis.profile.consistency)}>                      {userData.analysis.profile.consistency}                    </MetricValue>                    <MetricDescription>Regular contribution patterns</MetricDescription>                  </MetricCard>                  <MetricCard color="#fb8500">                    <MetricTitle>🚀 Innovation</MetricTitle>                    <MetricValue color={getPersonalityColor(userData.analysis.profile.innovation)}>                      {userData.analysis.profile.innovation}                    </MetricValue>                    <MetricDescription>Public repositories created</MetricDescription>                  </MetricCard>                  <MetricCard color="#2ea043">                    <MetricTitle>⭐ Avg Stars</MetricTitle>                    <MetricValue>{userData.analysis.repository.avgStars}</MetricValue>                    <MetricDescription>Community appreciation</MetricDescription>                  </MetricCard>                  <MetricCard color="#58a6ff">                    <MetricTitle>🍴 Avg Forks</MetricTitle>                    <MetricValue>{userData.analysis.repository.avgForks}</MetricValue>                    <MetricDescription>Project reusability</MetricDescription>                  </MetricCard>                  <MetricCard color="#7c3aed">                    <MetricTitle>📝 Documentation</MetricTitle>                    <MetricValue>{userData.analysis.repository.documentationRate}%</MetricValue>                    <MetricDescription>Repos with descriptions</MetricDescription>                  </MetricCard>                </AnalysisGrid>              </SectionContainer>              <SectionContainer>                <SectionTitle>💭 Sentiment & Communication Analysis</SectionTitle>                <AnalysisGrid>                  <MetricCard color={getSentimentColor(userData.analysis.sentiment.score)}>                    <MetricTitle>{userData.analysis.sentiment.emoji} Overall Sentiment</MetricTitle>                    <MetricValue color={getSentimentColor(userData.analysis.sentiment.score)}>                      {userData.analysis.sentiment.category}                    </MetricValue>                    <SentimentBar>                      <SentimentFill sentiment={userData.analysis.sentiment.score} />                    </SentimentBar>                    <MetricDescription>{userData.analysis.sentiment.description}</MetricDescription>                  </MetricCard>                  <MetricCard color="#17a2b8">                    <MetricTitle>📈 Sentiment Score</MetricTitle>                    <MetricValue color={getSentimentColor(userData.analysis.sentiment.score)}>                      {(userData.analysis.sentiment.score * 100).toFixed(1)}%                    </MetricValue>                    <MetricDescription>                      {userData.analysis.sentiment.score > 0 ? 'Above neutral' : 'Below neutral'} emotional tone                    </MetricDescription>                  </MetricCard>                  <MetricCard color="#28a745">                    <MetricTitle>✨ Positive Indicators</MetricTitle>                    <MetricValue color="#28a745">{userData.analysis.sentiment.positiveCount}</MetricValue>                    <MetricDescription>Encouraging and optimistic expressions</MetricDescription>                  </MetricCard>                  <MetricCard color="#dc3545">                    <MetricTitle>⚡ Critical Indicators</MetricTitle>                    <MetricValue color="#dc3545">{userData.analysis.sentiment.negativeCount}</MetricValue>                    <MetricDescription>Direct and critical expressions</MetricDescription>                  </MetricCard>                  <MetricCard color="#6f42c1">                    <MetricTitle>💬 Communication Pattern</MetricTitle>                    <MetricValue color="#6f42c1">{userData.analysis.sentiment.communicationPattern}</MetricValue>                    <MetricDescription>Level of engagement in discussions</MetricDescription>                  </MetricCard>                  <MetricCard color="#fd7e14">                    <MetricTitle>🎯 Communication Tone</MetricTitle>                    <MetricValue color="#fd7e14">{userData.analysis.sentiment.communicationTone}</MetricValue>                    <MetricDescription>Professional vs casual approach</MetricDescription>                  </MetricCard>                </AnalysisGrid>              </SectionContainer>              <SectionContainer>                <SectionTitle>🗣️ Cultural & Behavioral Insights</SectionTitle>                <AnalysisGrid>                  <MetricCard color="#1f6feb">                    <MetricTitle>🗨️ Issue Engagement</MetricTitle>                    <MetricValue color={getPersonalityColor(userData.analysis.communication.issueEngagement)}>                      {userData.analysis.communication.issueEngagement}                    </MetricValue>                    <MetricDescription>Problem solving participation</MetricDescription>                  </MetricCard>                  <MetricCard color="#2ea043">                    <MetricTitle>🔄 Pull Request Activity</MetricTitle>                    <MetricValue color={getPersonalityColor(userData.analysis.communication.prActivity)}>                      {userData.analysis.communication.prActivity}                    </MetricValue>                    <MetricDescription>Code contributions frequency</MetricDescription>                  </MetricCard>                  <MetricCard color="#f1e05a">                    <MetricTitle>💻 Primary Language</MetricTitle>                    <MetricValue>{userData.analysis.behavioral.primaryLanguage}</MetricValue>                    <MetricDescription>Most frequently used</MetricDescription>                  </MetricCard>                  <MetricCard color="#06b6d4">                    <MetricTitle>🎯 Project Focus</MetricTitle>                    <MetricValue color={getPersonalityColor(userData.analysis.behavioral.projectFocus)}>                      {userData.analysis.behavioral.projectFocus}                    </MetricValue>                    <MetricDescription>Variety of project types</MetricDescription>                  </MetricCard>                  <MetricCard color="#e74c3c">                    <MetricTitle>{userData.analysis.cultural.regionalEmoji} Region</MetricTitle>                    <MetricValue>{userData.analysis.cultural.region}</MetricValue>                    <MetricDescription>Based on location patterns</MetricDescription>                  </MetricCard>                  <MetricCard color="#9b59b6">                    <MetricTitle>💬 Communication Style</MetricTitle>                    <MetricValue color="#9b59b6">{userData.analysis.cultural.communicationStyle}</MetricValue>                    <MetricDescription>Cultural communication approach</MetricDescription>                  </MetricCard>                  <MetricCard color="#3498db">                    <MetricTitle>⚙️ Work Philosophy</MetricTitle>                    <MetricValue color="#3498db">{userData.analysis.cultural.workStyle}</MetricValue>                    <MetricDescription>Regional work methodology</MetricDescription>                  </MetricCard>                  <MetricCard color="#27ae60">                    <MetricTitle>{userData.analysis.tone.toneEmoji} Formality</MetricTitle>                    <MetricValue color="#27ae60">{userData.analysis.tone.formality}</MetricValue>                    <MetricDescription>Project description tone</MetricDescription>                  </MetricCard>                  <MetricCard color="#e67e22">                    <MetricTitle>🔥 Enthusiasm</MetricTitle>                    <MetricValue color="#e67e22">{userData.analysis.tone.enthusiasm}</MetricValue>                    <MetricDescription>Energy in communications</MetricDescription>                  </MetricCard>                  <MetricCard color="#8e44ad">                    <MetricTitle>{userData.analysis.language.styleEmoji} Writing Style</MetricTitle>                    <MetricValue color="#8e44ad">{userData.analysis.language.verbosity}</MetricValue>                    <MetricDescription>Detailed vs. concise approach</MetricDescription>                  </MetricCard>                </AnalysisGrid>              </SectionContainer>              <SectionContainer>                <SectionTitle>⚡ Recent Activity</SectionTitle>                {userData.events.slice(0, 3).map((event, index) => (                  <ActivityItem key={index}>                    <div>                      <ActivityType>{event.type.replace('Event', '')}</ActivityType>                      <ActivityRepo>{event.repo?.name}</ActivityRepo>                    </div>                    <ActivityDescription>                      {getActivityDescription(event)} • {formatDate(event.created_at)}                    </ActivityDescription>                  </ActivityItem>                ))}              </SectionContainer>            </MainContent>          </Dashboard>        )}      </Container>    </>  );};export default App;DISABLE_ESLINT_PLUGIN=true