{"ast":null,"code":"import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { User, GitBranch, MessageCircle, Calendar, TrendingUp, Activity, GitCommit, GitPullRequest, Star, Eye, Clock, ChartBarHorizontal, MagnifyingGlass, GithubLogo, Warning, ThumbsUp, Lightbulb, Heart, Fire, Code, Users, BookOpen, Globe } from '@phosphor-icons/react'; // Styled Componentsconst Container = styled.div`  min-height: 100vh;  background: linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #0f3460 100%);  color: white;  font-family: 'Inter', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;`;const Header = styled.header`  padding: 2rem;  text-align: center;  background: rgba(255, 255, 255, 0.05);  backdrop-filter: blur(20px);  border-bottom: 1px solid rgba(255, 255, 255, 0.1);`;const Title = styled.h1`  font-size: 3.5rem;  margin: 0 0 1rem 0;  display: flex;  align-items: center;  justify-content: center;  gap: 1rem;  font-weight: 700;  background: linear-gradient(45deg, #4facfe, #00f2fe);  -webkit-background-clip: text;  -webkit-text-fill-color: transparent;  background-clip: text;`;const Subtitle = styled.p`  font-size: 1.2rem;  color: rgba(255, 255, 255, 0.8);  margin: 0;  max-width: 600px;  margin: 0 auto;`;const SearchSection = styled.div`  padding: 3rem 2rem;  display: flex;  justify-content: center;  gap: 1rem;  flex-wrap: wrap;`;const SearchContainer = styled.div`  position: relative;  display: flex;  align-items: center;`;const SearchInput = styled.input`  padding: 1.2rem 1.5rem 1.2rem 3rem;  font-size: 1.1rem;  border: 2px solid rgba(255, 255, 255, 0.2);  border-radius: 12px;  background: rgba(255, 255, 255, 0.1);  color: white;  min-width: 350px;  backdrop-filter: blur(10px);  transition: all 0.3s ease;    &::placeholder {    color: rgba(255, 255, 255, 0.6);  }    &:focus {    outline: none;    border-color: #4facfe;    box-shadow: 0 0 0 3px rgba(79, 172, 254, 0.3);    background: rgba(255, 255, 255, 0.15);  }`;const SearchIcon = styled(MagnifyingGlass)`  position: absolute;  left: 1rem;  color: rgba(255, 255, 255, 0.6);  z-index: 1;`;const SearchButton = styled.button`  padding: 1.2rem 2rem;  font-size: 1.1rem;  border: none;  border-radius: 12px;  background: linear-gradient(45deg, #4facfe, #00f2fe);  color: white;  cursor: pointer;  display: flex;  align-items: center;  gap: 0.5rem;  font-weight: 600;  transition: all 0.3s ease;    &:hover {    transform: translateY(-2px);    box-shadow: 0 8px 25px rgba(79, 172, 254, 0.4);  }    &:disabled {    background: rgba(255, 255, 255, 0.2);    cursor: not-allowed;    transform: none;    box-shadow: none;  }`;const Dashboard = styled.div`  padding: 2rem;  max-width: 1400px;  margin: 0 auto;`;const Card = styled.div`  background: rgba(255, 255, 255, 0.1);  backdrop-filter: blur(20px);  border: 1px solid rgba(255, 255, 255, 0.2);  border-radius: 16px;  padding: 2rem;  margin-bottom: 2rem;  transition: all 0.3s ease;    &:hover {    transform: translateY(-4px);    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);  }`;const UserProfile = styled.div`  display: flex;  gap: 2rem;  align-items: center;  margin-bottom: 2rem;    @media (max-width: 768px) {    flex-direction: column;    text-align: center;  }`;const Avatar = styled.img`  width: 120px;  height: 120px;  border-radius: 50%;  border: 4px solid rgba(255, 255, 255, 0.3);  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);`;const UserInfo = styled.div`  flex: 1;`;const UserName = styled.h2`  font-size: 2rem;  margin: 0 0 0.5rem 0;  color: white;`;const UserBio = styled.p`  color: rgba(255, 255, 255, 0.8);  margin: 0 0 1rem 0;  line-height: 1.6;`;const UserStats = styled.div`  display: flex;  gap: 2rem;    @media (max-width: 768px) {    justify-content: center;  }`;const Stat = styled.div`  display: flex;  align-items: center;  gap: 0.5rem;  color: rgba(255, 255, 255, 0.8);`;const MetricsGrid = styled.div`  display: grid;  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));  gap: 2rem;  margin-bottom: 3rem;`;const MetricCard = styled(Card)`  text-align: center;  padding: 2rem 1.5rem;`;const MetricValue = styled.div`  font-size: 3rem;  font-weight: 700;  margin: 1rem 0;  background: linear-gradient(45deg, #4facfe, #00f2fe);  -webkit-background-clip: text;  -webkit-text-fill-color: transparent;  background-clip: text;`;const MetricLabel = styled.div`  color: rgba(255, 255, 255, 0.8);  font-size: 1.1rem;  margin-bottom: 0.5rem;`;const MetricIcon = styled.div`  display: flex;  justify-content: center;  margin-bottom: 1rem;  color: #4facfe;`;const LoadingSpinner = styled.div`  display: flex;  justify-content: center;  align-items: center;  padding: 4rem;    &::after {    content: '';    width: 40px;    height: 40px;    border: 3px solid rgba(255, 255, 255, 0.3);    border-top: 3px solid #4facfe;    border-radius: 50%;    animation: spin 1s linear infinite;  }    @keyframes spin {    0% { transform: rotate(0deg); }    100% { transform: rotate(360deg); }  }`;const ErrorMessage = styled.div`  background: rgba(220, 53, 69, 0.2);  border: 1px solid rgba(220, 53, 69, 0.4);  color: #ff6b7a;  padding: 1.5rem;  border-radius: 12px;  text-align: center;  margin: 2rem 0;`;const RepositoryGrid = styled.div`  display: grid;  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));  gap: 1.5rem;  margin-top: 2rem;`;const RepoCard = styled.div`  background: rgba(255, 255, 255, 0.05);  border: 1px solid rgba(255, 255, 255, 0.1);  border-radius: 12px;  padding: 1.5rem;  transition: all 0.3s ease;    &:hover {    background: rgba(255, 255, 255, 0.1);    transform: translateY(-2px);  }`;const RepoName = styled.h3`  margin: 0 0 0.5rem 0;  color: #4facfe;  font-size: 1.1rem;`;const RepoDescription = styled.p`  color: rgba(255, 255, 255, 0.8);  margin: 0 0 1rem 0;  font-size: 0.9rem;  line-height: 1.4;`;const RepoStats = styled.div`  display: flex;  gap: 1rem;  font-size: 0.8rem;  color: rgba(255, 255, 255, 0.6);`;const RepoStat = styled.div`  display: flex;  align-items: center;  gap: 0.3rem;`;const SectionTitle = styled.h2`  font-size: 1.8rem;  margin: 3rem 0 1.5rem 0;  color: white;  display: flex;  align-items: center;  gap: 0.5rem;`;const FeatureCard = styled(Card)`  text-align: center;  padding: 3rem 2rem;`;const FeatureIcon = styled.div`  font-size: 4rem;  margin-bottom: 1rem;  color: #4facfe;`;const FeatureTitle = styled.h3`  font-size: 1.5rem;  margin-bottom: 1rem;  color: white;`;const FeatureDescription = styled.p`  color: rgba(255, 255, 255, 0.8);  line-height: 1.6;`;// Mock data for demo purposesconst mockUserData = {  login: \"octocat\",  name: \"The Octocat\",  bio: \"GitHub's mascot and a passionate developer who loves open source\",  avatar_url: \"https://github.githubassets.com/images/modules/logos_page/Octocat.png\",  followers: 5420,  following: 142,  public_repos: 127,  created_at: \"2011-01-25T18:44:36Z\",  location: \"San Francisco\",  blog: \"https://github.blog\",  company: \"@github\"};const mockRepos = [  {    name: \"Hello-World\",    description: \"My first repository on GitHub!\",    stargazers_count: 1542,    forks_count: 234,    language: \"JavaScript\",    updated_at: \"2024-01-15T10:30:00Z\"  },  {    name: \"Spoon-Knife\",    description: \"This repo is for demonstration purposes only.\",    stargazers_count: 12543,    forks_count: 145234,    language: \"HTML\",    updated_at: \"2024-01-10T15:20:00Z\"  },  {    name: \"git-consortium\",    description: \"This repository is for the Git Consortium.\",    stargazers_count: 234,    forks_count: 45,    language: \"Ruby\",    updated_at: \"2023-12-20T09:15:00Z\"  }];function App() {  const [username, setUsername] = useState('');  const [userData, setUserData] = useState(null);  const [repositories, setRepositories] = useState([]);  const [loading, setLoading] = useState(false);  const [error, setError] = useState('');  const handleSearch = async () => {    if (!username.trim()) return;        setLoading(true);    setError('');    setUserData(null);    setRepositories([]);    try {      // For demo purposes, we'll use mock data      // In a real app, you would fetch from GitHub API      setTimeout(() => {        setUserData({          ...mockUserData,          login: username        });        setRepositories(mockRepos);        setLoading(false);      }, 1500);          } catch (err) {      setError('User not found or API error occurred');      setLoading(false);    }  };  const handleKeyPress = (e) => {    if (e.key === 'Enter') {      handleSearch();    }  };  const formatDate = (dateString) => {    return new Date(dateString).toLocaleDateString('en-US', {      year: 'numeric',      month: 'long',      day: 'numeric'    });  };  const getLanguageColor = (language) => {    const colors = {      JavaScript: '#f1e05a',      HTML: '#e34c26',      CSS: '#563d7c',      Python: '#3572A5',      Java: '#b07219',      Ruby: '#701516',      Go: '#00ADD8',      TypeScript: '#2b7489',      PHP: '#4F5D95'    };    return colors[language] || '#ffffff';  };  return (    <Container>      <Header>        <Title>          <GithubLogo size={48} />          Reflectocat        </Title>        <Subtitle>          Discover and analyze GitHub profiles with beautiful insights and metrics        </Subtitle>      </Header>      <SearchSection>        <SearchContainer>          <SearchIcon size={20} />          <SearchInput            type=\"text\"            placeholder=\"Enter GitHub username...\"            value={username}            onChange={(e) => setUsername(e.target.value)}            onKeyPress={handleKeyPress}          />        </SearchContainer>        <SearchButton onClick={handleSearch} disabled={loading}>          {loading ? 'Searching...' : 'Analyze Profile'}          <Activity size={20} />        </SearchButton>      </SearchSection>      <Dashboard>        {loading && <LoadingSpinner />}                {error && <ErrorMessage>{error}</ErrorMessage>}        {!userData && !loading && !error && (          <MetricsGrid>            <FeatureCard>              <FeatureIcon>                <User size={64} />              </FeatureIcon>              <FeatureTitle>Profile Analysis</FeatureTitle>              <FeatureDescription>                Get comprehensive insights into any GitHub user's profile, including bio analysis, stats, and activity patterns.              </FeatureDescription>            </FeatureCard>            <FeatureCard>              <FeatureIcon>                <ChartBarHorizontal size={64} />              </FeatureIcon>              <FeatureTitle>Repository Metrics</FeatureTitle>              <FeatureDescription>                Analyze repository statistics, languages used, star counts, and contribution patterns across projects.              </FeatureDescription>            </FeatureCard>            <FeatureCard>              <FeatureIcon>                <TrendingUp size={64} />              </FeatureIcon>              <FeatureTitle>Activity Tracking</FeatureTitle>              <FeatureDescription>                Track commits, issues, pull requests, and other activities to understand development patterns.              </FeatureDescription>            </FeatureCard>          </MetricsGrid>        )}        {userData && (          <>            <Card>              <UserProfile>                <Avatar src={userData.avatar_url} alt={`${userData.login}'s avatar`} />                <UserInfo>                  <UserName>{userData.name || userData.login}</UserName>                  <UserBio>{userData.bio || 'No bio available'}</UserBio>                  <UserStats>                    <Stat>                      <Users size={16} />                      {userData.followers} followers                    </Stat>                    <Stat>                      <Heart size={16} />                      {userData.following} following                    </Stat>                    <Stat>                      <BookOpen size={16} />                      {userData.public_repos} repos                    </Stat>                    <Stat>                      <Calendar size={16} />                      Joined {formatDate(userData.created_at)}                    </Stat>                  </UserStats>                </UserInfo>              </UserProfile>            </Card>            <MetricsGrid>              <MetricCard>                <MetricIcon>                  <Star size={32} />                </MetricIcon>                <MetricLabel>Total Stars</MetricLabel>                <MetricValue>                  {repositories.reduce((sum, repo) => sum + repo.stargazers_count, 0).toLocaleString()}                </MetricValue>              </MetricCard>              <MetricCard>                <MetricIcon>                  <GitBranch size={32} />                </MetricIcon>                <MetricLabel>Total Forks</MetricLabel>                <MetricValue>                  {repositories.reduce((sum, repo) => sum + repo.forks_count, 0).toLocaleString()}                </MetricValue>              </MetricCard>              <MetricCard>                <MetricIcon>                  <BookOpen size={32} />                </MetricIcon>                <MetricLabel>Public Repositories</MetricLabel>                <MetricValue>{userData.public_repos}</MetricValue>              </MetricCard>              <MetricCard>                <MetricIcon>                  <Users size={32} />                </MetricIcon>                <MetricLabel>Followers</MetricLabel>                <MetricValue>{userData.followers.toLocaleString()}</MetricValue>              </MetricCard>            </MetricsGrid>            <Card>              <SectionTitle>                <BookOpen size={24} />                Popular Repositories              </SectionTitle>              <RepositoryGrid>                {repositories.map((repo, index) => (                  <RepoCard key={index}>                    <RepoName>{repo.name}</RepoName>                    <RepoDescription>                      {repo.description || 'No description available'}                    </RepoDescription>                    <RepoStats>                      <RepoStat>                        <Star size={14} />                        {repo.stargazers_count.toLocaleString()}                      </RepoStat>                      <RepoStat>                        <GitBranch size={14} />                        {repo.forks_count.toLocaleString()}                      </RepoStat>                      {repo.language && (                        <RepoStat>                          <div                             style={{                              width: '12px',                              height: '12px',                              borderRadius: '50%',                              backgroundColor: getLanguageColor(repo.language)                            }}                          />                          {repo.language}                        </RepoStat>                      )}                      <RepoStat>                        <Clock size={14} />                        {formatDate(repo.updated_at)}                      </RepoStat>                    </RepoStats>                  </RepoCard>                ))}              </RepositoryGrid>            </Card>          </>        )}      </Dashboard>    </Container>  );}export default App;","map":{"version":3,"names":["React","useState","styled","User","GitBranch","MessageCircle","Calendar","TrendingUp","Activity","GitCommit","GitPullRequest","Star","Eye","Clock","ChartBarHorizontal","MagnifyingGlass","GithubLogo","Warning","ThumbsUp","Lightbulb","Heart","Fire","Code","Users","BookOpen","Globe"],"sources":["/workspaces/reflectocat/web/src/App.js"],"sourcesContent":["import React, { useState } from 'react';import styled from 'styled-components';import {   User,   GitBranch,   MessageCircle,   Calendar,   TrendingUp,   Activity,  GitCommit,  GitPullRequest,  Star,  Eye,  Clock,  ChartBarHorizontal,  MagnifyingGlass,  GithubLogo,  Warning,  ThumbsUp,  Lightbulb,  Heart,  Fire,  Code,  Users,  BookOpen,  Globe} from '@phosphor-icons/react';// Styled Componentsconst Container = styled.div`  min-height: 100vh;  background: linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #0f3460 100%);  color: white;  font-family: 'Inter', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;`;const Header = styled.header`  padding: 2rem;  text-align: center;  background: rgba(255, 255, 255, 0.05);  backdrop-filter: blur(20px);  border-bottom: 1px solid rgba(255, 255, 255, 0.1);`;const Title = styled.h1`  font-size: 3.5rem;  margin: 0 0 1rem 0;  display: flex;  align-items: center;  justify-content: center;  gap: 1rem;  font-weight: 700;  background: linear-gradient(45deg, #4facfe, #00f2fe);  -webkit-background-clip: text;  -webkit-text-fill-color: transparent;  background-clip: text;`;const Subtitle = styled.p`  font-size: 1.2rem;  color: rgba(255, 255, 255, 0.8);  margin: 0;  max-width: 600px;  margin: 0 auto;`;const SearchSection = styled.div`  padding: 3rem 2rem;  display: flex;  justify-content: center;  gap: 1rem;  flex-wrap: wrap;`;const SearchContainer = styled.div`  position: relative;  display: flex;  align-items: center;`;const SearchInput = styled.input`  padding: 1.2rem 1.5rem 1.2rem 3rem;  font-size: 1.1rem;  border: 2px solid rgba(255, 255, 255, 0.2);  border-radius: 12px;  background: rgba(255, 255, 255, 0.1);  color: white;  min-width: 350px;  backdrop-filter: blur(10px);  transition: all 0.3s ease;    &::placeholder {    color: rgba(255, 255, 255, 0.6);  }    &:focus {    outline: none;    border-color: #4facfe;    box-shadow: 0 0 0 3px rgba(79, 172, 254, 0.3);    background: rgba(255, 255, 255, 0.15);  }`;const SearchIcon = styled(MagnifyingGlass)`  position: absolute;  left: 1rem;  color: rgba(255, 255, 255, 0.6);  z-index: 1;`;const SearchButton = styled.button`  padding: 1.2rem 2rem;  font-size: 1.1rem;  border: none;  border-radius: 12px;  background: linear-gradient(45deg, #4facfe, #00f2fe);  color: white;  cursor: pointer;  display: flex;  align-items: center;  gap: 0.5rem;  font-weight: 600;  transition: all 0.3s ease;    &:hover {    transform: translateY(-2px);    box-shadow: 0 8px 25px rgba(79, 172, 254, 0.4);  }    &:disabled {    background: rgba(255, 255, 255, 0.2);    cursor: not-allowed;    transform: none;    box-shadow: none;  }`;const Dashboard = styled.div`  padding: 2rem;  max-width: 1400px;  margin: 0 auto;`;const Card = styled.div`  background: rgba(255, 255, 255, 0.1);  backdrop-filter: blur(20px);  border: 1px solid rgba(255, 255, 255, 0.2);  border-radius: 16px;  padding: 2rem;  margin-bottom: 2rem;  transition: all 0.3s ease;    &:hover {    transform: translateY(-4px);    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);  }`;const UserProfile = styled.div`  display: flex;  gap: 2rem;  align-items: center;  margin-bottom: 2rem;    @media (max-width: 768px) {    flex-direction: column;    text-align: center;  }`;const Avatar = styled.img`  width: 120px;  height: 120px;  border-radius: 50%;  border: 4px solid rgba(255, 255, 255, 0.3);  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);`;const UserInfo = styled.div`  flex: 1;`;const UserName = styled.h2`  font-size: 2rem;  margin: 0 0 0.5rem 0;  color: white;`;const UserBio = styled.p`  color: rgba(255, 255, 255, 0.8);  margin: 0 0 1rem 0;  line-height: 1.6;`;const UserStats = styled.div`  display: flex;  gap: 2rem;    @media (max-width: 768px) {    justify-content: center;  }`;const Stat = styled.div`  display: flex;  align-items: center;  gap: 0.5rem;  color: rgba(255, 255, 255, 0.8);`;const MetricsGrid = styled.div`  display: grid;  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));  gap: 2rem;  margin-bottom: 3rem;`;const MetricCard = styled(Card)`  text-align: center;  padding: 2rem 1.5rem;`;const MetricValue = styled.div`  font-size: 3rem;  font-weight: 700;  margin: 1rem 0;  background: linear-gradient(45deg, #4facfe, #00f2fe);  -webkit-background-clip: text;  -webkit-text-fill-color: transparent;  background-clip: text;`;const MetricLabel = styled.div`  color: rgba(255, 255, 255, 0.8);  font-size: 1.1rem;  margin-bottom: 0.5rem;`;const MetricIcon = styled.div`  display: flex;  justify-content: center;  margin-bottom: 1rem;  color: #4facfe;`;const LoadingSpinner = styled.div`  display: flex;  justify-content: center;  align-items: center;  padding: 4rem;    &::after {    content: '';    width: 40px;    height: 40px;    border: 3px solid rgba(255, 255, 255, 0.3);    border-top: 3px solid #4facfe;    border-radius: 50%;    animation: spin 1s linear infinite;  }    @keyframes spin {    0% { transform: rotate(0deg); }    100% { transform: rotate(360deg); }  }`;const ErrorMessage = styled.div`  background: rgba(220, 53, 69, 0.2);  border: 1px solid rgba(220, 53, 69, 0.4);  color: #ff6b7a;  padding: 1.5rem;  border-radius: 12px;  text-align: center;  margin: 2rem 0;`;const RepositoryGrid = styled.div`  display: grid;  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));  gap: 1.5rem;  margin-top: 2rem;`;const RepoCard = styled.div`  background: rgba(255, 255, 255, 0.05);  border: 1px solid rgba(255, 255, 255, 0.1);  border-radius: 12px;  padding: 1.5rem;  transition: all 0.3s ease;    &:hover {    background: rgba(255, 255, 255, 0.1);    transform: translateY(-2px);  }`;const RepoName = styled.h3`  margin: 0 0 0.5rem 0;  color: #4facfe;  font-size: 1.1rem;`;const RepoDescription = styled.p`  color: rgba(255, 255, 255, 0.8);  margin: 0 0 1rem 0;  font-size: 0.9rem;  line-height: 1.4;`;const RepoStats = styled.div`  display: flex;  gap: 1rem;  font-size: 0.8rem;  color: rgba(255, 255, 255, 0.6);`;const RepoStat = styled.div`  display: flex;  align-items: center;  gap: 0.3rem;`;const SectionTitle = styled.h2`  font-size: 1.8rem;  margin: 3rem 0 1.5rem 0;  color: white;  display: flex;  align-items: center;  gap: 0.5rem;`;const FeatureCard = styled(Card)`  text-align: center;  padding: 3rem 2rem;`;const FeatureIcon = styled.div`  font-size: 4rem;  margin-bottom: 1rem;  color: #4facfe;`;const FeatureTitle = styled.h3`  font-size: 1.5rem;  margin-bottom: 1rem;  color: white;`;const FeatureDescription = styled.p`  color: rgba(255, 255, 255, 0.8);  line-height: 1.6;`;// Mock data for demo purposesconst mockUserData = {  login: \"octocat\",  name: \"The Octocat\",  bio: \"GitHub's mascot and a passionate developer who loves open source\",  avatar_url: \"https://github.githubassets.com/images/modules/logos_page/Octocat.png\",  followers: 5420,  following: 142,  public_repos: 127,  created_at: \"2011-01-25T18:44:36Z\",  location: \"San Francisco\",  blog: \"https://github.blog\",  company: \"@github\"};const mockRepos = [  {    name: \"Hello-World\",    description: \"My first repository on GitHub!\",    stargazers_count: 1542,    forks_count: 234,    language: \"JavaScript\",    updated_at: \"2024-01-15T10:30:00Z\"  },  {    name: \"Spoon-Knife\",    description: \"This repo is for demonstration purposes only.\",    stargazers_count: 12543,    forks_count: 145234,    language: \"HTML\",    updated_at: \"2024-01-10T15:20:00Z\"  },  {    name: \"git-consortium\",    description: \"This repository is for the Git Consortium.\",    stargazers_count: 234,    forks_count: 45,    language: \"Ruby\",    updated_at: \"2023-12-20T09:15:00Z\"  }];function App() {  const [username, setUsername] = useState('');  const [userData, setUserData] = useState(null);  const [repositories, setRepositories] = useState([]);  const [loading, setLoading] = useState(false);  const [error, setError] = useState('');  const handleSearch = async () => {    if (!username.trim()) return;        setLoading(true);    setError('');    setUserData(null);    setRepositories([]);    try {      // For demo purposes, we'll use mock data      // In a real app, you would fetch from GitHub API      setTimeout(() => {        setUserData({          ...mockUserData,          login: username        });        setRepositories(mockRepos);        setLoading(false);      }, 1500);          } catch (err) {      setError('User not found or API error occurred');      setLoading(false);    }  };  const handleKeyPress = (e) => {    if (e.key === 'Enter') {      handleSearch();    }  };  const formatDate = (dateString) => {    return new Date(dateString).toLocaleDateString('en-US', {      year: 'numeric',      month: 'long',      day: 'numeric'    });  };  const getLanguageColor = (language) => {    const colors = {      JavaScript: '#f1e05a',      HTML: '#e34c26',      CSS: '#563d7c',      Python: '#3572A5',      Java: '#b07219',      Ruby: '#701516',      Go: '#00ADD8',      TypeScript: '#2b7489',      PHP: '#4F5D95'    };    return colors[language] || '#ffffff';  };  return (    <Container>      <Header>        <Title>          <GithubLogo size={48} />          Reflectocat        </Title>        <Subtitle>          Discover and analyze GitHub profiles with beautiful insights and metrics        </Subtitle>      </Header>      <SearchSection>        <SearchContainer>          <SearchIcon size={20} />          <SearchInput            type=\"text\"            placeholder=\"Enter GitHub username...\"            value={username}            onChange={(e) => setUsername(e.target.value)}            onKeyPress={handleKeyPress}          />        </SearchContainer>        <SearchButton onClick={handleSearch} disabled={loading}>          {loading ? 'Searching...' : 'Analyze Profile'}          <Activity size={20} />        </SearchButton>      </SearchSection>      <Dashboard>        {loading && <LoadingSpinner />}                {error && <ErrorMessage>{error}</ErrorMessage>}        {!userData && !loading && !error && (          <MetricsGrid>            <FeatureCard>              <FeatureIcon>                <User size={64} />              </FeatureIcon>              <FeatureTitle>Profile Analysis</FeatureTitle>              <FeatureDescription>                Get comprehensive insights into any GitHub user's profile, including bio analysis, stats, and activity patterns.              </FeatureDescription>            </FeatureCard>            <FeatureCard>              <FeatureIcon>                <ChartBarHorizontal size={64} />              </FeatureIcon>              <FeatureTitle>Repository Metrics</FeatureTitle>              <FeatureDescription>                Analyze repository statistics, languages used, star counts, and contribution patterns across projects.              </FeatureDescription>            </FeatureCard>            <FeatureCard>              <FeatureIcon>                <TrendingUp size={64} />              </FeatureIcon>              <FeatureTitle>Activity Tracking</FeatureTitle>              <FeatureDescription>                Track commits, issues, pull requests, and other activities to understand development patterns.              </FeatureDescription>            </FeatureCard>          </MetricsGrid>        )}        {userData && (          <>            <Card>              <UserProfile>                <Avatar src={userData.avatar_url} alt={`${userData.login}'s avatar`} />                <UserInfo>                  <UserName>{userData.name || userData.login}</UserName>                  <UserBio>{userData.bio || 'No bio available'}</UserBio>                  <UserStats>                    <Stat>                      <Users size={16} />                      {userData.followers} followers                    </Stat>                    <Stat>                      <Heart size={16} />                      {userData.following} following                    </Stat>                    <Stat>                      <BookOpen size={16} />                      {userData.public_repos} repos                    </Stat>                    <Stat>                      <Calendar size={16} />                      Joined {formatDate(userData.created_at)}                    </Stat>                  </UserStats>                </UserInfo>              </UserProfile>            </Card>            <MetricsGrid>              <MetricCard>                <MetricIcon>                  <Star size={32} />                </MetricIcon>                <MetricLabel>Total Stars</MetricLabel>                <MetricValue>                  {repositories.reduce((sum, repo) => sum + repo.stargazers_count, 0).toLocaleString()}                </MetricValue>              </MetricCard>              <MetricCard>                <MetricIcon>                  <GitBranch size={32} />                </MetricIcon>                <MetricLabel>Total Forks</MetricLabel>                <MetricValue>                  {repositories.reduce((sum, repo) => sum + repo.forks_count, 0).toLocaleString()}                </MetricValue>              </MetricCard>              <MetricCard>                <MetricIcon>                  <BookOpen size={32} />                </MetricIcon>                <MetricLabel>Public Repositories</MetricLabel>                <MetricValue>{userData.public_repos}</MetricValue>              </MetricCard>              <MetricCard>                <MetricIcon>                  <Users size={32} />                </MetricIcon>                <MetricLabel>Followers</MetricLabel>                <MetricValue>{userData.followers.toLocaleString()}</MetricValue>              </MetricCard>            </MetricsGrid>            <Card>              <SectionTitle>                <BookOpen size={24} />                Popular Repositories              </SectionTitle>              <RepositoryGrid>                {repositories.map((repo, index) => (                  <RepoCard key={index}>                    <RepoName>{repo.name}</RepoName>                    <RepoDescription>                      {repo.description || 'No description available'}                    </RepoDescription>                    <RepoStats>                      <RepoStat>                        <Star size={14} />                        {repo.stargazers_count.toLocaleString()}                      </RepoStat>                      <RepoStat>                        <GitBranch size={14} />                        {repo.forks_count.toLocaleString()}                      </RepoStat>                      {repo.language && (                        <RepoStat>                          <div                             style={{                              width: '12px',                              height: '12px',                              borderRadius: '50%',                              backgroundColor: getLanguageColor(repo.language)                            }}                          />                          {repo.language}                        </RepoStat>                      )}                      <RepoStat>                        <Clock size={14} />                        {formatDate(repo.updated_at)}                      </RepoStat>                    </RepoStats>                  </RepoCard>                ))}              </RepositoryGrid>            </Card>          </>        )}      </Dashboard>    </Container>  );}export default App;"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAOC,MAAM,MAAM,mBAAmB;AAAC,SAAWC,IAAI,EAAIC,SAAS,EAAIC,aAAa,EAAIC,QAAQ,EAAIC,UAAU,EAAIC,QAAQ,EAAGC,SAAS,EAAGC,cAAc,EAAGC,IAAI,EAAGC,GAAG,EAAGC,KAAK,EAAGC,kBAAkB,EAAGC,eAAe,EAAGC,UAAU,EAAGC,OAAO,EAAGC,QAAQ,EAAGC,SAAS,EAAGC,KAAK,EAAGC,IAAI,EAAGC,IAAI,EAAGC,KAAK,EAAGC,QAAQ,EAAGC,KAAK,QAAO,uBAAuB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}